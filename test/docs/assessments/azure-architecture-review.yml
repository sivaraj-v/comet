### YamlMime:Assessment
id: azure-architecture-review
title: Azure Architecture Review
locale: en-us
description: Examine your workload through the lenses of resiliency, cost, devops practices, security and scalability.
version: '0'
categories:
- isRequired: false
  id: Resiliency
  title: Resiliency
  description: In a cloud environment you scale out rather than buying higher-end hardware to scale up. While itâ€™s always desirable to prevent all failure, focus your efforts in minimizing the effects of a single failing component.
  questions:
  - type: multiSelect
    id: '0'
    title: Which business metrics have you defined for your application?
    choices:
    - id: 'A'
      text: Set your workload availability targets.
    - id: 'B'
      text: Identified how long the workload can be down for, and how much data it's acceptable to lose in a disaster.
    - id: 'C'
      text: Identified your redundancy requirements and SLAs.
    - id: 'D'
      text: Have an understanding of Azure Service Level Agreements (SLAs) and how they interact with your workload.
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '1'
    title: How are you managing your data?
    choices:
    - id: 'A'
      text: Segregated read operations from update operations on your data stores.
    - id: 'B'
      text: Architected databases for resiliency.
    - id: 'C'
      text: Implemented geographic replication for your databases.
    - id: 'D'
      text: Architected storage for resiliency.
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '2'
    title: How are you managing errors and failures?
    choices:
    - id: 'A'
      text: Implemented Throttling.
    - id: 'B'
      text: Have a strategy to handle transient failures.
    - id: 'C'
      text: Configured request timeouts.
    - id: 'D'
      text: Have a method of preventing cascading failures.
    - id: 'E'
      text: Split the application components with separate health probes.
    - id: 'F'
      text: None of the above.
    - id: 'G'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '3'
    title: How are you handling disaster recovery (backup and restore) for this workload?
    choices:
    - id: 'A'
      text: Planned for dependency failures.
    - id: 'B'
      text: Have a response plan in place for network outages.
    - id: 'C'
      text: Defined manual responses where automation doesn't exist.
    - id: 'D'
      text: Understand what to do when data is corrupted or deleted.
    - id: 'E'
      text: Have a disaster recovery plan.
    - id: 'F'
      text: Defined a backup strategy.
    - id: 'G'
      text: Protected virtual machines from corruption and accidental deletion.
    - id: 'H'
      text: Have a resource management strategy.
    - id: 'I'
      text: Automatically schedule and test backup and restore operations.
    - id: 'J'
      text: Document regional failure plans.
    - id: 'K'
      text: Archive application configuration and installation information.
    - id: 'L'
      text: None of the above.
    - id: 'M'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '4'
    title: How have you ensured that your application is resilient to failures?
    choices:
    - id: 'A'
      text: Identified your subscription and service requirements.
    - id: 'B'
      text: Planned the expected usage patterns.
    - id: 'C'
      text: Identified distinct workloads.
    - id: 'D'
      text: Have SLAs and support information for third-party services.
    - id: 'E'
      text: Implemented health probes/checks for load balancers (LB) and application gateways (AGW).
    - id: 'F'
      text: Replicated storage locally utilizing RAID or equivialnt technologies to protect against disk failure.
    - id: 'G'
      text: Implemented load balancing.
    - id: 'H'
      text: Implemented queuing between application tiers.
    - id: 'I'
      text: Run multiple instances of the app and database.
    - id: 'J'
      text: Performed a failure-mode analysis of the workload.
    - id: 'K'
      text: Deployed the application across multiple regions.
    - id: 'L'
      text: None of the above.
    - id: 'M'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '5'
    title: How are you ensuring failures are resolved quickly?
    choices:
    - id: 'A'
      text: Have an early warning system for workloads where that makes sense.
    - id: 'B'
      text: Monitor any long-running workflows for failures.
    - id: 'C'
      text: Have visualization and alerts so that the monitoring is actionable.
    - id: 'D'
      text: Validated that the monitoring system is functional.
    - id: 'E'
      text: Azure subscription/service limits are documented and known.
    - id: 'F'
      text: Implemented the necessary instrumentation to monitor my workload.
    - id: 'G'
      text: Monitoring tools are used to collect and view historical statistics.
    - id: 'H'
      text: Health probes are implemented to validate application functionality.
    - id: 'I'
      text: Collect log information and correlate across all tiers.
    - id: 'J'
      text: None of the above.
    - id: 'K'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '6'
    title: How do you test your applications to ensure they are fault tolerant?
    choices:
    - id: 'A'
      text: Perform testing in small, real-life situations.
    - id: 'B'
      text: Test my workload by injecting faults.
    - id: 'C'
      text: Perform load testing on my workload.
    - id: 'D'
      text: None of the above.
    - id: 'E'
      text: Not applicable to this workload.
- isRequired: false
  id: Cost
  title: Cost
  description: An effective architecture achieves business goals and ROI requirements while keeping costs within the allocated budget.
  questions:
  - type: multiSelect
    id: '0'
    title: What actions are you taking to optimize cloud costs?
    choices:
    - id: 'A'
      text: Identify opportunities to reduce overall cost.
    - id: 'B'
      text: Use cost management tools to plan and track costs.
    - id: 'C'
      text: Tag my resources and track that back to costs.
    - id: 'D'
      text: None of the above.
    - id: 'E'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '1'
    title: How do you ensure that cloud resources are appropriately provisioned?
    choices:
    - id: 'A'
      text: Automate based on the application lifespan.
    - id: 'B'
      text: Use DevOps and deployment automation.
    - id: 'C'
      text: Perform capacity planning iteratively.
    - id: 'D'
      text: Configure auto-scale policies for my workload (both in and out).
    - id: 'E'
      text: Select the right resource offering size (VM, disk, database).
    - id: 'F'
      text: Choose appropriate services that match my business requirements.
    - id: 'G'
      text: None of the above.
    - id: 'H'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '2'
    title: How is your organization modeling cloud costs?
    choices:
    - id: 'A'
      text: Estimate and track my costs.
    - id: 'B'
      text: Educate the employees about the cloud and various pricing models.
    - id: 'C'
      text: Have appropriate governance about expenditure.
    - id: 'D'
      text: Treat resources as a utility
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '3'
    title: How do you manage the storage footprint of your digital assets?
    choices:
    - id: 'A'
      text: Track how data flows in and out of Azure.
    - id: 'B'
      text: Defined and enforce data retention and archival requirements.
    - id: 'C'
      text: Spec-ed out the data storage and partitioned it correctly.
    - id: 'D'
      text: None of the above.
    - id: 'E'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '4'
    title: How are you monitoring your costs?
    choices:
    - id: 'A'
      text: Watch my cloud costs.
    - id: 'B'
      text: Create and respond to cost alerts.
    - id: 'C'
      text: Perform cost reviews on a regular cadence.
    - id: 'D'
      text: Defined budgets for my workload.
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '5'
    title: What trade-offs have you made to optimize for cost?
    choices:
    - id: 'A'
      text: Analyze ROI regularly.
    - id: 'B'
      text: Use different Azure datacenter locations to optimize cost.
    - id: 'C'
      text: Use Azure Marketplace.
    - id: 'D'
      text: Track the resource tier and optimize appropriately.
    - id: 'E'
      text: Take advantage of appropriate subscription offer types.
    - id: 'F'
      text: None of the above.
    - id: 'G'
      text: Not applicable to this workload.
- isRequired: false
  id: Scalability
  title: Scalability
  description: Prioritize scalability as you design and implement phases. Scalability leads to lower maintenance costs, better user experience, and higher agility.
  questions:
  - type: multiSelect
    id: '0'
    title: How are you designing your applications to scale?
    choices:
    - id: 'A'
      text: Have the right data store to match usage.
    - id: 'B'
      text: Use dynamic service discovery for microservices applications.
    - id: 'C'
      text: Utilize connection pooling.
    - id: 'D'
      text: Compress data when appropriate.
    - id: 'E'
      text: Use locking to ensure consistency.
    - id: 'F'
      text: Use async calls and waits to prevent locks.
    - id: 'G'
      text: Use microservices when you can.
    - id: 'H'
      text: Use queues.
    - id: 'I'
      text: Avoid sticky sessions and client affinity.
    - id: 'J'
      text: Automatically scale when load increases.
    - id: 'K'
      text: Use background jobs.
    - id: 'L'
      text: None of the above.
    - id: 'M'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '1'
    title: How are you thinking about performance?
    choices:
    - id: 'A'
      text: Have well-defined performance goals.
    - id: 'B'
      text: Use horizontal scaling when possible.
    - id: 'C'
      text: Have policies to scale in and scale down when my load decreases.
    - id: 'D'
      text: Understand the performance bottlenecks.
    - id: 'E'
      text: Use idempotent operations.
    - id: 'F'
      text: None of the above.
    - id: 'G'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '2'
    title: How are you handling user load?
    choices:
    - id: 'A'
      text: Run tests at peak load.
    - id: 'B'
      text: Have awareness about the time taken to scale in response to events.
    - id: 'C'
      text: None of the above.
    - id: 'D'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '3'
    title: How are you ensuring you have sufficient Capacity?
    choices:
    - id: 'A'
      text: Use a Content Delivery Networks (CDN) if applicable.
    - id: 'B'
      text: Have a strategy in place to manage events that may cause a spike in load.
    - id: 'C'
      text: Optimized resource choices (vm, database sizing, etc) to match the needs of my application.
    - id: 'D'
      text: Configured scaling policies by using the appropriate metrics.
    - id: 'E'
      text: Automatically schedule autoscaling to add resources based on time of day trends.
    - id: 'F'
      text: None of the above.
    - id: 'G'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '4'
    title: How are you managing your data to handle scale?
    choices:
    - id: 'A'
      text: Design for eventual consistency.
    - id: 'B'
      text: Use sharding for database storage when appropriate.
    - id: 'C'
      text: Minimize the load on the data store.
    - id: 'D'
      text: Normalize the data appropriately.
    - id: 'E'
      text: Optimize database queries and indexes.
    - id: 'F'
      text: Document plans for data growth and retention.
    - id: 'G'
      text: None of the above.
    - id: 'H'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '5'
    title: How are you monitoring to ensure the workload is scaling appropriately?
    choices:
    - id: 'A'
      text: Track when resources scale in and out.
    - id: 'B'
      text: Have an overall monitoring strategy for scalability.
    - id: 'C'
      text: None of the above.
    - id: 'D'
      text: Not applicable to this workload.
- isRequired: false
  id: DevOps
  title: DevOps
  description: To ensure that your application is running effectively over time, consider multiple perspectives, from both an application and infrastructure angles. Your strategy must include the processes that you implement so that your users are getting the right experience.
  questions:
  - type: multiSelect
    id: '0'
    title: How are you designing your applications to take into account DevOps?
    choices:
    - id: 'A'
      text: Leverage containers in your workload appropriately.
    - id: 'B'
      text: Treat your infrastructure as if it were code.
    - id: 'C'
      text: Track the dependencies of your workload.
    - id: 'D'
      text: Aware of your resource limits in Azure.
    - id: 'E'
      text: Tag and name your resources in a consistent fashion.
    - id: 'F'
      text: Isolate my workloads.
    - id: 'G'
      text: Have an orchestration system in place to deploy my application.
    - id: 'H'
      text: None of the above.
    - id: 'I'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '1'
    title: How are you managing the configuration of your workload?
    choices:
    - id: 'A'
      text: Automated manual tasks.
    - id: 'B'
      text: Monitor and update machine configurations.
    - id: 'C'
      text: Schedule deployments.
    - id: 'D'
      text: Deploy, manage, and monitor my workload as a group rather than handling its components individually.
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '2'
    title: What considerations are you making around the deployment of your infrastructure?
    choices:
    - id: 'A'
      text: Document the release process.
    - id: 'B'
      text: Use automation to deploy and update my workload.
    - id: 'C'
      text: Have a release process for my workload.
    - id: 'D'
      text: Track the release of new code as it progresses through different stages.
    - id: 'E'
      text: Audit and track changes in my code and infrastructure.
    - id: 'F'
      text: Have a rollback plan for each deployment.
    - id: 'G'
      text: Have knowledge of portions of my workload that need to be highly available and have an appropriate deployment strategy.
    - id: 'H'
      text: None of the above.
    - id: 'I'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '3'
    title: How is development done on this workload?
    choices:
    - id: 'A'
      text: Use environments for dev and test stages that simulate a production environment.
    - id: 'B'
      text: Instrumented my workload so view metrics in Azure Application Insights.
    - id: 'C'
      text: Manage and actively resolve the technical debt of the workload.
    - id: 'D'
      text: Have pipelines for continuous deployment/continuous integration.
    - id: 'E'
      text: Use feature flags to add new features.
    - id: 'F'
      text: None of the above.
    - id: 'G'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '4'
    title: How are you monitoring your deployments?
    choices:
    - id: 'A'
      text: Implement alerting and monitoring for the DevOps infrastructure of the workload.
    - id: 'B'
      text: Correlate events between the different application tiers.
    - id: 'C'
      text: Log for all deployments.
    - id: 'D'
      text: Track deployment metrics.
    - id: 'E'
      text: Report and set notifications for events.
    - id: 'F'
      text: Monitor underlying services.
    - id: 'G'
      text: None of the above.
    - id: 'H'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '5'
    title: What processes and procedures have you adopted to optimize your workload for DevOps?
    choices:
    - id: 'A'
      text: Have a branching strategy and adhere to its requirements.
    - id: 'B'
      text: Track and publish the roadmap.
    - id: 'C'
      text: Continuously improve the operational posture.
    - id: 'D'
      text: None of the above.
    - id: 'E'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '6'
    title: How are you testing your DevOps infrastructure?
    choices:
    - id: 'A'
      text: Perform business continuity drills.
    - id: 'B'
      text: Perform disaster recovery and fault injection.
    - id: 'C'
      text: Automate testing on deployments.
    - id: 'D'
      text: Use manual testing when required.
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
- isRequired: false
  id: Security
  title: Security
  description: Security is one of the most important aspects of any architecture. It provides confidentiality, integrity, and availability assurances against deliberate attacks and abuse of your valuable data and systems. Losing these assurances can negatively impact your business operations and revenue, as well as your organizationâ€™s reputation in the marketplace. In the following series of articles, weâ€™ll discuss key architectural considerations and principles for security and how they apply to Azure.
  questions:
  - type: multiSelect
    id: '0'
    title: What design considerations did you make in your workload in regards to security?
    choices:
    - id: 'A'
      text: Identified and classified business critical applications.
    - id: 'B'
      text: Adopted a DevOps approach to building software.
    - id: 'C'
      text: Leverage DevOps security guidance.
    - id: 'D'
      text: Use cloud services instead of building custom security implementations.
    - id: 'E'
      text: Use native security capabilities built into cloud services.
    - id: 'F'
      text: Implement security practices and tools during the development lifecycle.
    - id: 'G'
      text: Follow best practices for container security.
    - id: 'H'
      text: Install a web application firewall in front of your workload.
    - id: 'I'
      text: Authenticate via identity services where you can.
    - id: 'J'
      text: None of the above.
    - id: 'K'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '1'
    title: What considerations for compliance and governance do you need to take?
    choices:
    - id: 'A'
      text: Evaluate your security posture using standard benchmarks.
    - id: 'B'
      text: Remove virtual machine direct internet connectivity.
    - id: 'C'
      text: Monitor identity risk.
    - id: 'D'
      text: Perform penetration testing.
    - id: 'E'
      text: Prioritize security best practices.
    - id: 'F'
      text: Manage connected tenants.
    - id: 'G'
      text: Lines of responsibility are established.
    - id: 'H'
      text: There is an enterprise segmentation strategy in place.
    - id: 'I'
      text: The security team has read only access into all environments.
    - id: 'J'
      text: Use the root management group carefully.
    - id: 'K'
      text: Have a policy in place to apply security updates to VMs and strong password requirements.
    - id: 'L'
      text: Assigned a security incident notification contact.
    - id: 'M'
      text: Regularly review access from critical accounts.
    - id: 'N'
      text: Discover and remediate common risks.
    - id: 'O'
      text: Use blueprints to consistently deploy environments that comply with organizational policies.
    - id: 'P'
      text: Discover and replace insecure protocols.
    - id: 'Q'
      text: Considered whether or not you need elevated security capabilities.
    - id: 'R'
      text: Assigned appropriate privileges for managing the environment.
    - id: 'S'
      text: Audit and enforce policy compliance.
    - id: 'T'
      text: None of the above.
    - id: 'U'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '2'
    title: How are you managing encryption for this workload?
    choices:
    - id: 'A'
      text: Use identity based storage access controls.
    - id: 'B'
      text: Enabled platform encryption services.
    - id: 'C'
      text: Data at rest is encrypted.
    - id: 'D'
      text: Data in transit is encrypted.
    - id: 'E'
      text: Encrypt your virtual disk files.
    - id: 'F'
      text: None of the above.
    - id: 'G'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '3'
    title: How are you managing identity for this workload?
    choices:
    - id: 'A'
      text: Use a single enterprise directory.
    - id: 'B'
      text: Synchronize your identity systems.
    - id: 'C'
      text: Use cloud provider identity sources for third parties.
    - id: 'D'
      text: Block legacy authentication protocols.
    - id: 'E'
      text: Perform attack simulation on users.
    - id: 'F'
      text: Enforce conditional access for users.
    - id: 'G'
      text: Do not synchronize your on-premises admin accounts to cloud identity providers.
    - id: 'H'
      text: Use cross-platform identity management.
    - id: 'I'
      text: Have an identity strategy.
    - id: 'J'
      text: Use modern password protection offerings.
    - id: 'K'
      text: Have passwordless or multi-factor authentication enabled.
    - id: 'L'
      text: None of the above.
    - id: 'M'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '4'
    title: How have you secured the network of your workload?
    choices:
    - id: 'A'
      text: Have centralized network management and security.
    - id: 'B'
      text: Aligned network segmentation with the enterprise segmentation strategy.
    - id: 'C'
      text: Security extends past your network boundaries.
    - id: 'D'
      text: Deprecated the use of legacy security technologies.
    - id: 'E'
      text: Enabled enhanced network visibility.
    - id: 'F'
      text: DDoS mitigation plan is in place.
    - id: 'G'
      text: Have an intentional subnet security strategy.
    - id: 'H'
      text: Have a security containment strategy.
    - id: 'I'
      text: Have an internet ingress/egress policy defined.
    - id: 'J'
      text: Have implemented an internet edge strategy.
    - id: 'K'
      text: None of the above.
    - id: 'L'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '5'
    title: What tradeoffs do you need to make to meet your security goals?
    choices:
    - id: 'A'
      text: Build the appropriate level of resilience into your security infrastructure.
    - id: 'B'
      text: Balanced attacker cost versus your own.
    - id: 'C'
      text: Contained attacker access.
    - id: 'D'
      text: None of the above.
    - id: 'E'
      text: Not applicable to this workload.
  - type: multiSelect
    id: '6'
    title: How are you ensuring your critical accounts are protected?
    choices:
    - id: 'A'
      text: Simulate attacks against critical impact accounts.
    - id: 'B'
      text: Don't assign users with granular or custom permissions.
    - id: 'C'
      text: Established a lifecycle management policy for critical impact accounts.
    - id: 'D'
      text: Appropriate emergency access accounts configured.
    - id: 'E'
      text: None of the above.
    - id: 'F'
      text: Not applicable to this workload.
guidance:
  title: Recommendations for your workload
  description: Actionable items to consider implementing to improve your workload across the five pillars of the Azure Architecture Framework
  nextSteps:
    title: Next Steps
    steps:
    - title: Review the 'pillars of a great Azure architecture' learn module
      description: You want to build great things on Azure, but you're not sure exactly what that means. Using key principles throughout your architecture regardless of technology choice, can help you design, build, and continuously improve your architecture.
      links:
      - text: Visit Microsoft Learn
        url: /learn/modules/pillars-of-a-great-azure-architecture/
    - title: Review the Azure Architecture Framework
      description: 'A successful cloud solution implementations requires focus on these five pillars of architecture excellence: Cost, DevOps, Resiliency, Scalability, and Security.'
      links:
      - text: Visit Azure Architecture Center
        url: /azure/architecture/
    - title: Review the 'how to incorporate security into your architecture design' learn module
      description: Learn how to incorporate security into your architecture design, and discover the tools that Azure provides to help you create a secure environment through all the layers of your architecture.
      links:
      - text: Launch the design for security
        url: /learn/modules/design-for-security-in-azure/
  recommendation:
    title: Opportunities for improvement
    categories:
    - id: Resiliency-0-A
      title: Set your workload availability targets.
      description: Define your own target SLAs for each workload in your solution so you can determine whether the architecture meets the business requirements.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review workload availability targets'
        url: /azure/architecture/framework/Resiliency/business-metrics#workload-availability-targets
        noneOf:
        - Resiliency.0.A
        - Resiliency.0.F
        anyOf:
        - Resiliency.0.A
        - Resiliency.0.B
        - Resiliency.0.C
        - Resiliency.0.D
        - Resiliency.0.E
    - id: Resiliency-0-B
      title: Identified how long the workload can be down for, and how much data it's acceptable to lose in a disaster.
      description: Derive these values by conducting a risk assessment, and make sure you understand the cost and risk of downtime and data loss. These are nonfunctional requirements of a system and should be dictated by business requirements. Recovery time objective (RTO) is the maximum acceptable time an application is unavailable after an incident. Recovery point objective (RPO) is the maximum duration of data loss that's acceptable during a disaster. If the MTTR value of *any* critical component in a highly available setup exceeds the system RTO, a failure in the system might cause an unacceptable business disruption. That is, you can't restore the system within the defined RTO.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review recovery metrics'
        url: /azure/architecture/framework/Resiliency/business-metrics#recovery-metrics
        noneOf:
        - Resiliency.0.B
        - Resiliency.0.F
        anyOf:
        - Resiliency.0.A
        - Resiliency.0.B
        - Resiliency.0.C
        - Resiliency.0.D
        - Resiliency.0.E
    - id: Resiliency-0-C
      title: Identified your redundancy requirements and SLAs.
      description: Use these measures to plan for redundancy and determine customer SLAs. Mean time to recover (MTTR) is the average time it takes to restore a component after a failure.  Mean time between failures (MTBF) is the how long a component can reasonably expect to last between outages.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review availability metrics'
        url: /azure/architecture/framework/Resiliency/business-metrics#availability-metrics
        noneOf:
        - Resiliency.0.C
        - Resiliency.0.F
        anyOf:
        - Resiliency.0.A
        - Resiliency.0.B
        - Resiliency.0.C
        - Resiliency.0.D
        - Resiliency.0.E
    - id: Resiliency-0-D
      title: Have an understanding of Azure Service Level Agreements (SLAs) and how they interact with your workload.
      description: In Azure, the service level agreements describes Microsoft's commitments for uptime and connectivity. If the SLA for a particular service is 99.9%, you should expect the service to be available 99.9% of the time. Different services have different SLAs. The Azure SLA also includes provisions for obtaining a service credit if the SLA is not met, along with specific definitions of *availability* for each service. That aspect of the SLA acts as an enforcement policy.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review understand service-level agreements'
        url: /azure/architecture/framework/Resiliency/business-metrics#understand-service-level-agreements
        noneOf:
        - Resiliency.0.D
        - Resiliency.0.F
        anyOf:
        - Resiliency.0.A
        - Resiliency.0.B
        - Resiliency.0.C
        - Resiliency.0.D
        - Resiliency.0.E
    - id: Resiliency-1-A
      title: Segregated read operations from update operations on your data stores.
      description: In traditional architectures, the same data model is used to query and update a database. That's simple and works well for basic CRUD operations. In more complex applications, however, this approach can become unwieldy. For example, on the read side, the application may perform many different queries, returning data transfer objects (DTOs) with different shapes. Object mapping can become complicated. On the write side, the model may implement complex validation and business logic. As a result, you can end up with an overly complex model that does too much.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review command and query responsibility segregation (cqrs)'
        url: /azure/architecture/framework/Resiliency/data-management#command-and-query-responsibility-segregation-(cqrs)
        noneOf:
        - Resiliency.1.A
        - Resiliency.1.F
        anyOf:
        - Resiliency.1.A
        - Resiliency.1.B
        - Resiliency.1.C
        - Resiliency.1.D
        - Resiliency.1.E
    - id: Resiliency-1-B
      title: Architected databases for resiliency.
      description: There are a variety of methods available to architect your database for resiliency. Azure SQL Database automatically performs a combination of full database backups weekly, differential database backups hourly, and transaction log backups every five - ten minutes to protect your business from data loss. Use point-in-time restore to restore a database to an earlier time. Other databases have similar functions to achieve the same effect.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review database resiliency'
        url: /azure/architecture/framework/Resiliency/data-management#database-resiliency
        noneOf:
        - Resiliency.1.B
        - Resiliency.1.F
        anyOf:
        - Resiliency.1.A
        - Resiliency.1.B
        - Resiliency.1.C
        - Resiliency.1.D
        - Resiliency.1.E
    - id: Resiliency-1-C
      title: Implemented geographic replication for your databases.
      description: If you are using Azure SQL Database there are two types of recovery geo-restore and active geo-replication. Geo restore is also available with Basic, Standard, and Premium databases. It provides the default recovery option when the database is unavailable because of an incident in the region where your database is hosted. Similar to point-in-time restore, geo-restore relies on database backups in geo-redundant Azure storage. It restores from the geo-replicated backup copy, and therefore is resilient to the storage outages in the primary region. Active Geo-replication is available for all database tiers. Itâ€™s designed for applications that have more aggressive recovery requirements than geo-restore can offer.  Additionally, a variety of options are available for recovery and high availability for SQL Server 2012 (and later) running in Azure Virtual Machines.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review distribute data geographically'
        url: /azure/architecture/framework/Resiliency/data-management#distribute-data-geographically
        noneOf:
        - Resiliency.1.C
        - Resiliency.1.F
        anyOf:
        - Resiliency.1.A
        - Resiliency.1.B
        - Resiliency.1.C
        - Resiliency.1.D
        - Resiliency.1.E
    - id: Resiliency-1-D
      title: Architected storage for resiliency.
      description: Azure Storage provides data resiliency through automated replicas. However, this does not prevent application code or users from corrupting data, whether accidentally or maliciously. Maintaining data fidelity in the face of application or user error requires more advanced techniques, such as copying the data to a secondary storage location with an audit log.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review storage resiliency'
        url: /azure/architecture/framework/Resiliency/data-management#storage-resiliency
        noneOf:
        - Resiliency.1.D
        - Resiliency.1.F
        anyOf:
        - Resiliency.1.A
        - Resiliency.1.B
        - Resiliency.1.C
        - Resiliency.1.D
        - Resiliency.1.E
    - id: Resiliency-2-A
      title: Implemented Throttling.
      description: n alternative strategy to autoscaling is to allow applications to use resources only up to a limit, and then throttle them when this limit is reached. The system should monitor how it's using resources so that, when usage exceeds the threshold, it can throttle requests from one or more users. This will enable the system to continue functioning and meet any service level agreements (SLAs) that are in place.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review application throttling'
        url: /azure/architecture/framework/Resiliency/app-design-error-handling#application-throttling
        noneOf:
        - Resiliency.2.A
        - Resiliency.2.G
        anyOf:
        - Resiliency.2.A
        - Resiliency.2.B
        - Resiliency.2.C
        - Resiliency.2.D
        - Resiliency.2.E
        - Resiliency.2.F
    - id: Resiliency-2-B
      title: Have a strategy to handle transient failures.
      description: In the cloud, transient faults aren't uncommon and an application should be designed to handle them elegantly and transparently. This minimizes the effects faults can have on the business tasks the application is performing. The retry pattern leverages the fact that these faults are typically self-correcting, and if the action that triggered a fault is repeated after a suitable delay it's likely to be successful.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review handling transient failures'
        url: /azure/architecture/framework/Resiliency/app-design-error-handling#handling-transient-failures
        noneOf:
        - Resiliency.2.B
        - Resiliency.2.G
        anyOf:
        - Resiliency.2.A
        - Resiliency.2.B
        - Resiliency.2.C
        - Resiliency.2.D
        - Resiliency.2.E
        - Resiliency.2.F
    - id: Resiliency-2-C
      title: Configured request timeouts.
      description: Very short timeouts can cause excessive retry operations for services and resources that have considerable latency. Very long timeouts can cause blocking if a large number of requests are queued, waiting for a service or resource to respond.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review request timeouts'
        url: /azure/architecture/framework/Resiliency/app-design-error-handling#request-timeouts
        noneOf:
        - Resiliency.2.C
        - Resiliency.2.G
        anyOf:
        - Resiliency.2.A
        - Resiliency.2.B
        - Resiliency.2.C
        - Resiliency.2.D
        - Resiliency.2.E
        - Resiliency.2.F
    - id: Resiliency-2-D
      title: Have a method of preventing cascading failures.
      description: Failure in one part of the system can lead to cascading failures, resulting in many operations becoming blocked while holding onto critical system resources, such as memory, database connections. The circuit breaker pattern focuses on faults that take longer to fix and thus a retry is often not good enough. In these situations it might be pointless for an application to continually retry an operation that is unlikely to succeed, and instead the application should quickly accept that the operation has failed and handle this failure accordingly.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review cascading failures'
        url: /azure/architecture/framework/Resiliency/app-design-error-handling#cascading-failures
        noneOf:
        - Resiliency.2.D
        - Resiliency.2.G
        anyOf:
        - Resiliency.2.A
        - Resiliency.2.B
        - Resiliency.2.C
        - Resiliency.2.D
        - Resiliency.2.E
        - Resiliency.2.F
    - id: Resiliency-2-E
      title: Split the application components with separate health probes.
      description: Configure and test health probes for your load balancers and traffic managers. Ensure that your health endpoint checks the critical parts of the system and responds appropriately.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review application health probes'
        url: /azure/architecture/framework/Resiliency/app-design-error-handling#application-health-probes
        noneOf:
        - Resiliency.2.E
        - Resiliency.2.G
        anyOf:
        - Resiliency.2.A
        - Resiliency.2.B
        - Resiliency.2.C
        - Resiliency.2.D
        - Resiliency.2.E
        - Resiliency.2.F
    - id: Resiliency-3-A
      title: Planned for dependency failures.
      description: For each dependent service, you should understand the implications of a service disruption and the way that the application will respond. Many services include features that support resiliency and availability, so evaluating each service independently is likely to improve your disaster recovery plan. For example, Azure Event Hubs supports failing over to the secondary namespace.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review dependent service outage'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#dependent-service-outage
        noneOf:
        - Resiliency.3.A
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-B
      title: Have a response plan in place for network outages.
      description: When parts of the Azure network are inaccessible, you might not be able to access your application or data. In this situation, we recommend designing the disaster recovery strategy to run most applications with reduced functionality. If reducing functionality isn't an option, the remaining options are application downtime or failover to an alternate region.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review network outage'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#network-outage
        noneOf:
        - Resiliency.3.B
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-C
      title: Defined manual responses where automation doesn't exist.
      description: Although automation is ideal, some strategies for disaster recovery require manual responses. Monitor your application for warning signs that may require proactive intervention. For example, if Azure SQL Database or Azure Cosmos DB consistently throttles your application, you might need to increase your database capacity or optimize your queries. Even though the application might handle the throttling errors transparently, your telemetry should still raise an alert so that you can follow up. For service limits and quota thresholds, we recommend configuring alerts on Azure resources metrics and diagnostics logs. When possible, set up alerts on metrics, which are lower latency than diagnostics logs.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review manual responses'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#manual-responses
        noneOf:
        - Resiliency.3.C
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-D
      title: Understand what to do when data is corrupted or deleted.
      description: If a data store fails, there might be data inconsistencies when it becomes available again, especially if the data was replicated. Understanding the recovery time objective (RTO) and recovery point objective (RPO) of replicated data stores can help you predict the amount of data loss. To understand whether the cross-regional failover is started manually or by Microsoft, review the Azure service SLAs. For services with no SLAs for cross-regional failover, Microsoft typically decides when to fail over and usually prioritizes recovery of data in the primary region. If data in the primary region is deemed unrecoverable, Microsoft fails over to the secondary region.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review data corruption and restoration'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#data-corruption-and-restoration
        noneOf:
        - Resiliency.3.D
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-E
      title: Have a disaster recovery plan.
      description: Start by creating a recovery plan. The plan is considered complete after it has been fully tested. Include the people, processes, and applications needed to restore functionality within the service-level agreement (SLA) you've defined for your customers.  See the Learn more link for specific guidance on things to include in your recovery plan.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review disaster recovery plan'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#disaster-recovery-plan
        noneOf:
        - Resiliency.3.E
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-F
      title: Defined a backup strategy.
      description: Many alternative strategies are available for implementing distributed compute across regions. These must be tailored to the specific business requirements and circumstances of the application. At a high level, the approaches can be divided into the following categories redeploy on disaster, warm spare (Active/Passive), and hot spare (active/active).
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review backup strategy'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#backup-strategy
        noneOf:
        - Resiliency.3.F
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-G
      title: Protected virtual machines from corruption and accidental deletion.
      description: To protect Azure Virtual Machines (VMs) from application errors or accidental deletion, use Azure Backup. Azure Backup enables the creation of backups that are consistent across multiple VM disks. In addition, the Backup Vault can be replicated across regions to provide recovery from region loss.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review backup vms'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#backup-vms
        noneOf:
        - Resiliency.3.G
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-H
      title: Have a resource management strategy.
      description: You can distribute compute instances across regions by creating a separate cloud service in each target region, and then publishing the deployment package to each cloud service. However, distributing traffic across cloud services in different regions must be implemented by the application developer or with a traffic management service. Determining the number of spare role instances to deploy in advance for disaster recovery is an important aspect of capacity planning. Having a full-scale secondary deployment ensures that capacity is already available when needed; however, this effectively doubles the cost. A common pattern is to have a small, secondary deployment, just large enough to run critical services. This small secondary deployment is a good idea, both to reserve capacity, and for testing the configuration of the secondary environment.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review resource management'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#resource-management
        noneOf:
        - Resiliency.3.H
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-I
      title: Automatically schedule and test backup and restore operations.
      description: Test failover and failback to verify that your application's dependent services come back up in a synchronized manner during disaster recovery. Changes to systems and operations may affect failover and failback functions, but the impact may not be detected until the main system fails or becomes overloaded. Test failover capabilities *before* they are required to compensate for a live problem. Also be sure that dependent services fail over and fail back in the correct order.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review failover and failback testing'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#failover-and-failback-testing
        noneOf:
        - Resiliency.3.I
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-J
      title: Document regional failure plans.
      description: Azure is divided physically and logically into units called regions. A region consists of one or more datacenters in close proximity. Under rare circumstances, it is possible that facilities in an entire region can become inaccessible, for example due to network failures. Or facilities can be lost entirely, for example due to a natural disaster. This section explains the capabilities of Azure for creating applications that are distributed across regions. Such distribution helps to minimize the possibility that a failure in one region could affect other regions.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review planning for regional failures'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#planning-for-regional-failures
        noneOf:
        - Resiliency.3.J
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-3-K
      title: Archive application configuration and installation information.
      description: Itâ€™s important to remember, that a DR plan is more than just an ordered restoration from backup and validation process. Applications may require post-restoration configuration due to site changes, or reinstallation may be necessary with restored data imported after.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review application archives'
        url: /azure/architecture/framework/Resiliency/backup-and-recovery#application-archives
        noneOf:
        - Resiliency.3.K
        - Resiliency.3.M
        anyOf:
        - Resiliency.3.A
        - Resiliency.3.B
        - Resiliency.3.C
        - Resiliency.3.D
        - Resiliency.3.E
        - Resiliency.3.F
        - Resiliency.3.G
        - Resiliency.3.H
        - Resiliency.3.I
        - Resiliency.3.J
        - Resiliency.3.K
        - Resiliency.3.L
    - id: Resiliency-4-A
      title: Identified your subscription and service requirements.
      description: Choose the right subscription and service features for your app by working through these tasks evaluate requirements against Azure subscription and service limits, determine how many storage accounts you need., select the right service tier for Azure SQL Database, provision sufficient request units (RUs) in Azure Cosmos DB.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review determine subscription and service requirements'
        url: /azure/architecture/framework/Resiliency/app-design#determine-subscription-and-service-requirements
        noneOf:
        - Resiliency.4.A
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-B
      title: Planned the expected usage patterns.
      description: Identify differences in requirements during critical and non-critical periods. Are there certain critical periods when the system must be available? For example, a tax-filing application can't fail during a filing deadline and a video streaming service shouldn't lag during a live event. In these situations, weigh the cost against the risk.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review plan for usage patterns'
        url: /azure/architecture/framework/Resiliency/app-design#plan-for-usage-patterns
        noneOf:
        - Resiliency.4.B
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-C
      title: Identified distinct workloads.
      description: Cloud solutions typically consist of multiple application *workloads*. A workload is a distinct capability or task that is logically separated from other tasks in terms of business logic and data storage requirements. For example, an e-commerce app might have the following workloads browse and search a product catalog, create and track orders, view recommendations. Each workload has different requirements for availability, scalability, data consistency, and disaster recovery. Make your business decisions by balancing cost versus risk for each workload.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review identify distinct workloads'
        url: /azure/architecture/framework/Resiliency/app-design#identify-distinct-workloads
        noneOf:
        - Resiliency.4.C
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-D
      title: Have SLAs and support information for third-party services.
      description: If your application has dependencies on third-party services, identify how these services can fail and what effect failures will have on your application.  A third-party service might not include monitoring and diagnostics. Log calls to these services and correlate them with your application's health and diagnostic logging using a unique identifier.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review managing 3rd party services'
        url: /azure/architecture/framework/Resiliency/app-design#managing-3rd-party-services
        noneOf:
        - Resiliency.4.D
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-E
      title: Implemented health probes/checks for load balancers (LB) and application gateways (AGW).
      description: Implement functional checks in an application that external tools can access through exposed endpoints at regular intervals. This can help to verify that applications and services are performing correctly.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review load balancer health probes'
        url: /azure/architecture/framework/Resiliency/app-design#load-balancer-health-probes
        noneOf:
        - Resiliency.4.E
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-F
      title: Replicated storage locally utilizing RAID or equivialnt technologies to protect against disk failure.
      description: Deploy the application in multiple Azure paired regions. Deploy multiple instances of the web app.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review protecting from disk failures'
        url: /azure/architecture/framework/Resiliency/app-design#protecting-from-disk-failures
        noneOf:
        - Resiliency.4.F
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-G
      title: Implemented load balancing.
      description: To load balance traffic across regions requires a traffic management solution. Azure provides Azure Traffic Manager You can also take advantage of third-party services that provide similar traffic management capabilities. Proper load-balancing allows you to meet availability requirements and to minimize costs associated with availability.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review load balancing'
        url: /azure/architecture/framework/Resiliency/app-design#load-balancing
        noneOf:
        - Resiliency.4.G
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-H
      title: Implemented queuing between application tiers.
      description: Use a queue that acts as a buffer between a task and a service it invokes in order to smooth intermittent heavy loads that can cause the service to fail or the task to time out. This can help to minimize the impact of peaks in demand on availability and responsiveness for both the task and the service.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review message brokers'
        url: /azure/architecture/framework/Resiliency/app-design#message-brokers
        noneOf:
        - Resiliency.4.H
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-I
      title: Run multiple instances of the app and database.
      description: Deploy the application in multiple Azure paired regions. Use auto-failover and active geo-replication for SQL Database. Use Azure Managed Database Services for turnkey global distribution. Deploy multiple instances of the web app.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review single points of failure (spof)'
        url: /azure/architecture/framework/Resiliency/app-design#single-points-of-failure-(spof)
        noneOf:
        - Resiliency.4.I
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-J
      title: Performed a failure-mode analysis of the workload.
      description: Failure mode analysis (FMA) is a process for building resiliency into a system, by identifying possible failure points in the system. The FMA should be part of the architecture and design phases, so that you can build failure recovery into the system from the beginning. FMA builds resiliency into a system by identifying possible failure points and defining how the application responds to those failures. The FMA should be part of the architecture and design phases, so failure recovery is built into the system from the beginning. The goals of an FMA are to determine what types of failures an application might experience, capture the potential effects, and plan how best to identify and recover from failures.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review failure mode analysis'
        url: /azure/architecture/framework/Resiliency/app-design#failure-mode-analysis
        noneOf:
        - Resiliency.4.J
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-4-K
      title: Deployed the application across multiple regions.
      description: If your application is deployed to a single region, in the rare event the entire region becomes unavailable, your application will also be unavailable. This may be unacceptable under the terms of your application's SLA. If so, consider deploying your application and its services across multiple regions. A multi-region deployment can use an active-active pattern (distributing requests across multiple active instances) or an active-passive pattern (keeping a "warm" instance in reserve, in case the primary instance fails). Many failures are manageable within the same Azure region. However, in the unlikely event of a region-wide service disruption, the locally redundant copies of your data aren't available. If you've enabled geo-replication, there are three additional copies of your blobs and tables in a different region. If Microsoft declares the region lost, Azure remaps all the DNS entries to the secondary region.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review operating in multiple regions'
        url: /azure/architecture/framework/Resiliency/app-design#operating-in-multiple-regions
        noneOf:
        - Resiliency.4.K
        - Resiliency.4.M
        anyOf:
        - Resiliency.4.A
        - Resiliency.4.B
        - Resiliency.4.C
        - Resiliency.4.D
        - Resiliency.4.E
        - Resiliency.4.F
        - Resiliency.4.G
        - Resiliency.4.H
        - Resiliency.4.I
        - Resiliency.4.J
        - Resiliency.4.K
        - Resiliency.4.L
    - id: Resiliency-5-A
      title: Have an early warning system for workloads where that makes sense.
      description: Monitor your application for warning signs that might require proactive intervention. Tools that assess the overall health of the application and its dependencies help you to recognize quickly when a system or its components suddenly become unavailable. Use them to implement an early warning system. Identify the key performance indicators of your application's health, such as transient exceptions and remote call latency. Set thresholds at levels that identify issues before they become critical and require a recovery response. Send an alert to operations when the threshold value is reached.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review early warning system'
        url: /azure/architecture/framework/Resiliency/monitoring#early-warning-system
        noneOf:
        - Resiliency.5.A
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-B
      title: Monitor any long-running workflows for failures.
      description: Long-running workflows often include multiple steps, each of which should be independent. Track the progress of long-running processes to minimize the likelihood that the entire workflow will need to be rolled back or that multiple compensating transactions will need to be executed.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review long-running workflow failures'
        url: /azure/architecture/framework/Resiliency/monitoring#long-running-workflow-failures
        noneOf:
        - Resiliency.5.B
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-C
      title: Have visualization and alerts so that the monitoring is actionable.
      description: Present telemetry data in a format that makes it easy for an operator to notice problems or trends quickly, such as a dashboard or email alert. Get a full-stack view of application state by using Azure dashboards to create a consolidated view of monitoring graphs from Application Insights, Log Analytics, Azure Monitor metrics, and Service Health. And useÂ Azure Monitor alerts to create notifications on Service Health, resource health, Azure Monitor metrics, logs in Log Analytics, and Application Insights.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review visualization and alerts'
        url: /azure/architecture/framework/Resiliency/monitoring#visualization-and-alerts
        noneOf:
        - Resiliency.5.C
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-D
      title: Validated that the monitoring system is functional.
      description: Include monitoring systems in your test plan. Automated failover and failback systems depend on the correct functioning of monitoring and instrumentation. Dashboards to visualize system health and operator alerts also depend on having accurate monitoring and instrumentation. If these elements fail, miss critical information, or report inaccurate data, an operator might not realize that the system is unhealthy or failing.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review test monitoring'
        url: /azure/architecture/framework/Resiliency/monitoring#test-monitoring
        noneOf:
        - Resiliency.5.D
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-E
      title: Azure subscription/service limits are documented and known.
      description: Azure subscriptions have limits on certain resource types, such as number of resource groups, cores, and storage accounts. To ensure that your application doesn't run up against Azure subscription limits, create alerts that poll for services nearing theirÂ limits and quotas. Address the following subscription limits with alerts individual services, Azure storage scalability and performance targets, scalability targets for virtual machine disks, VM size, Azure SQL database tier.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review azure subscription and service limits'
        url: /azure/architecture/framework/Resiliency/monitoring#azure-subscription-and-service-limits
        noneOf:
        - Resiliency.5.E
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-F
      title: Implemented the necessary instrumentation to monitor my workload.
      description: It's not practical to monitor your application directly, so instrumentation is key. A large-scale distributed system might run on dozens of virtual machines (VMs), which are added and removed over time. Likewise, a cloud application might use a number of data stores and a single user action might span multiple subsystems. Provide rich instrumentation for failures that are likely but have not yet occurred, provide enough data to determine the cause, mitigate the situation, and ensure that the system remains available, for failures that have already occurred, the application should return an appropriate error message to the user but should attempt to continue running, albeit with reduced functionality.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review instrumentation'
        url: /azure/architecture/framework/Resiliency/monitoring#instrumentation
        noneOf:
        - Resiliency.5.F
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-G
      title: Monitoring tools are used to collect and view historical statistics.
      description: Raw instrumentation data can be held in various locations and formats, including application trace logs, IIS logs, performance counters. These disparate sources are collected, consolidated, and placed in reliable data stores in Azure, such as Application Insights, Azure Monitor metrics, Service Health, storage accounts, and Azure Log Analytics.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review collection and storage'
        url: /azure/architecture/framework/Resiliency/monitoring#collection-and-storage
        noneOf:
        - Resiliency.5.G
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-H
      title: Health probes are implemented to validate application functionality.
      description: The health and performance of an application can degrade over time, and degradation might not be noticeable until the application fails. Implement probes or check functions, and run them regularly from outside the application. These checks can be as simple as measuring response time for the application as a whole, for individual parts of the application, for specific services that the application uses, or for separate components. Check functions can run processes to ensure that they produce valid results, measure latency and check availability, and extract information from the system.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review creating good health probes'
        url: /azure/architecture/framework/Resiliency/monitoring#creating-good-health-probes
        noneOf:
        - Resiliency.5.H
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-5-I
      title: Collect log information and correlate across all tiers.
      description: Analyze data consolidated in these data stores to troubleshoot issues and gain an overall view of application health. Generally, you can search for and analyze the data in Application Insights and Log Analytics usingÂ Kusto queriesÂ or view preconfigured graphs usingÂ management solutions. Or use Azure Advisor to view recommendations with a focus on resiliency and performance.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review analysis and diagnosis'
        url: /azure/architecture/framework/Resiliency/monitoring#analysis-and-diagnosis
        noneOf:
        - Resiliency.5.I
        - Resiliency.5.K
        anyOf:
        - Resiliency.5.A
        - Resiliency.5.B
        - Resiliency.5.C
        - Resiliency.5.D
        - Resiliency.5.E
        - Resiliency.5.F
        - Resiliency.5.G
        - Resiliency.5.H
        - Resiliency.5.I
        - Resiliency.5.J
    - id: Resiliency-6-A
      title: Perform testing in small, real-life situations.
      description: Simulation testing involves creating small, real-life situations. Simulations demonstrate the effectiveness of the solutions in the recovery plan and highlight any issues that weren't adequately addressed. As you perform simulation testing, follow best practices conduct simulations in a manner that doesn't disrupt actual business but feels like a real situation, make sure that simulated scenarios are completely controllable. If the recovery plan seems to be failing, you can restore the situation back to normal without causing damage, inform management about when and how the simulation exercises will be conducted. Your plan should detail the time frame and the resources affected during the simulation.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review simulation testing'
        url: /azure/architecture/framework/Resiliency/testing#simulation-testing
        noneOf:
        - Resiliency.6.A
        - Resiliency.6.E
        anyOf:
        - Resiliency.6.A
        - Resiliency.6.B
        - Resiliency.6.C
        - Resiliency.6.D
    - id: Resiliency-6-B
      title: Test my workload by injecting faults.
      description: For fault injection testing, check the resiliency of the system during failures, either by triggering actual failures or by simulating them. Here are some strategies to induce failures shut down virtual machine (VM) instances,  crash processes,  expire certificates, change access keys, shut down the DNS service on domain controllers, limit available system resources, such as RAM or number of threads, unmount disks, redeploy a VM. Your test plan should incorporate possible failure points identified during the design phase, in addition to common failure scenarios test your application in an environment as close to production as possible, test failures in combination, measure the recovery times, and be sure that your business requirements are met, verify that failures don't cascade and are handled in an isolated way.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review perform fault injection testing'
        url: /azure/architecture/framework/Resiliency/testing#perform-fault-injection-testing
        noneOf:
        - Resiliency.6.B
        - Resiliency.6.E
        anyOf:
        - Resiliency.6.A
        - Resiliency.6.B
        - Resiliency.6.C
        - Resiliency.6.D
    - id: Resiliency-6-C
      title: Perform load testing on my workload.
      description: Load testing is crucial for identifying failures that only happen under load, such as the back-end database being overwhelmed or service throttling. Test for peak load and anticipated increase in peak load, using production data or synthetic data that is as close to production data as possible. Your goal is to see how the application behaves under real-world conditions.
      iconUrl: /assessments/media/resiliency.svg
      links:
      - text: 'Review test under peak loads'
        url: /azure/architecture/framework/Resiliency/testing#test-under-peak-loads
        noneOf:
        - Resiliency.6.C
        - Resiliency.6.E
        anyOf:
        - Resiliency.6.A
        - Resiliency.6.B
        - Resiliency.6.C
        - Resiliency.6.D
    - id: Cost-0-A
      title: Identify opportunities to reduce overall cost.
      description: Azure Advisor enables you to act on cost management recommendations from within the Azure Portal, such as resizing virtual machines. Make sure that all stakeholders are in agreement regarding the implementation and timing of this change. Note that resizing a virtual machine does require the VM to be shut down and restarted, causing a period of time when it will be unavailable, so time this carefully for minimal business impact.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review act on recommendations'
        url: /azure/architecture/framework/Cost/optimizing#act-on-recommendations
        noneOf:
        - Cost.0.A
        - Cost.0.E
        anyOf:
        - Cost.0.A
        - Cost.0.B
        - Cost.0.C
        - Cost.0.D
    - id: Cost-0-B
      title: Use cost management tools to plan and track costs.
      description: Cost management is the process of effectively planning and controlling costs involved in your business. Cost management tasks are typically performed by finance, management, and app teams. Azure Cost Management can help you plan with cost in mind. It can also help you to analyze costs effectively and take action to optimize cloud spending.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review cost management tools'
        url: /azure/architecture/framework/Cost/optimizing#cost-management-tools
        noneOf:
        - Cost.0.B
        - Cost.0.E
        anyOf:
        - Cost.0.A
        - Cost.0.B
        - Cost.0.C
        - Cost.0.D
    - id: Cost-0-C
      title: Tag my resources and track that back to costs.
      description: Organizing cloud-based assets in ways that aid operational management and support accounting requirements is a common challenge that faces large cloud adoption efforts. By applying well-defined naming and metadata tagging conventions to cloud-hosted resources, IT staff can quickly find and manage resources. Well-defined names and tags also help to align cloud usage costs with business teams by using chargeback and showback accounting mechanisms.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review tagging'
        url: /azure/architecture/framework/Cost/optimizing#tagging
        noneOf:
        - Cost.0.C
        - Cost.0.E
        anyOf:
        - Cost.0.A
        - Cost.0.B
        - Cost.0.C
        - Cost.0.D
    - id: Cost-1-A
      title: Automate based on the application lifespan.
      description: Does your service run seasonally or follow long-term patterns? Some Azure services offer the concept of â€˜reserved instances', that can be utilized to yield further cost savings on predictable VM sizes that will be utilized for the solution's components. If these are available, consider purchasing Seasonal/one-off or long term (RIs). Reserved instances are purchased in one-year or three-year terms, with payment required for the full term up front. After purchase, the reservation is matched up to running instances of the same SKU size or same-family SKU sizes and hours from your reservation will be decremented accordingly.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review application lifespan and what should be automated'
        url: /azure/architecture/framework/Cost/provisioning#application-lifespan-and-what-should-be-automated
        noneOf:
        - Cost.1.A
        - Cost.1.H
        anyOf:
        - Cost.1.A
        - Cost.1.B
        - Cost.1.C
        - Cost.1.D
        - Cost.1.E
        - Cost.1.F
        - Cost.1.G
    - id: Cost-1-B
      title: Use DevOps and deployment automation.
      description: In an on premises environment, we do not typically have the luxury of being able to access APIs to turn on/off, or scale up/down workloads, in the same way as we do in the cloud. As we have a rich set of APIs, SDKs and automation technology that we can call upon, utilizing DevOps and even more classical automation principles enables us to ensure that the workload is available at an appropriate level of scale as needed. You may not have to leave the service running all of the time, incurring a consistent cost, consider whether it is actually a business requirement to leave the service online permanently 24x7, or could we save cost by shutting down the service or scaling it down outside normal business hours?
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review devops and deployment automation'
        url: /azure/architecture/framework/Cost/provisioning#devops-and-deployment-automation
        noneOf:
        - Cost.1.B
        - Cost.1.H
        anyOf:
        - Cost.1.A
        - Cost.1.B
        - Cost.1.C
        - Cost.1.D
        - Cost.1.E
        - Cost.1.F
        - Cost.1.G
    - id: Cost-1-C
      title: Perform capacity planning iteratively.
      description: One of the largest benefits of cloud computing is its rapid adaptability to changes in capacity. Having a good understanding of capacity requirements allows organizations to allocate resources with minimal overhead and grow/shrink on demand.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review iterative capacity planning'
        url: /azure/architecture/framework/Cost/provisioning#iterative-capacity-planning
        noneOf:
        - Cost.1.C
        - Cost.1.H
        anyOf:
        - Cost.1.A
        - Cost.1.B
        - Cost.1.C
        - Cost.1.D
        - Cost.1.E
        - Cost.1.F
        - Cost.1.G
    - id: Cost-1-D
      title: Configure auto-scale policies for my workload (both in and out).
      description: For certain application, capacity requirements may swing over time. Auto-scaling policies allow for less error-prone operations and cost savings through robust automation.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review auto-scaling policies'
        url: /azure/architecture/framework/Cost/provisioning#auto-scaling-policies
        noneOf:
        - Cost.1.D
        - Cost.1.H
        anyOf:
        - Cost.1.A
        - Cost.1.B
        - Cost.1.C
        - Cost.1.D
        - Cost.1.E
        - Cost.1.F
        - Cost.1.G
    - id: Cost-1-E
      title: Select the right resource offering size (VM, disk, database).
      description: Certain infrastructure resources are delivered to customers as fix-sized building blocks. Ensuring that these building blocks are adequately sized is important to meet capacity demand as well as to eliminate waste.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review right-sizing your resources'
        url: /azure/architecture/framework/Cost/provisioning#right-sizing-your-resources
        noneOf:
        - Cost.1.E
        - Cost.1.H
        anyOf:
        - Cost.1.A
        - Cost.1.B
        - Cost.1.C
        - Cost.1.D
        - Cost.1.E
        - Cost.1.F
        - Cost.1.G
    - id: Cost-1-F
      title: Choose appropriate services that match my business requirements.
      description: Any architecture planning starts with a careful enumeration of requirements. Architecting a Cloud solution is no different. As with any technology system, requirements are in place to ensure that the needs of the stakeholders are addressed and it is vital to remember that optimal design does not equal the lowest cost design. Cost is another requirement lever that can be adjusted as other requirements dictate, resulting in a scenario of complex tradeoffs between the areas that architects are seeking to optimize for such as security, scalability, resilience and operability. A solution architecture could perfectly address the challenges of these areas, however if the solution costs too much, the business will quickly look for alternate options to reduce cost. In some cases, the cost of not meeting expectations, internal or external, will outweigh the solution cost and the architecture is accepted, whereas in others the risk may be accepted in favor of a cheaper solution architecture.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review requirements'
        url: /azure/architecture/framework/Cost/provisioning#requirements
        noneOf:
        - Cost.1.F
        - Cost.1.H
        anyOf:
        - Cost.1.A
        - Cost.1.B
        - Cost.1.C
        - Cost.1.D
        - Cost.1.E
        - Cost.1.F
        - Cost.1.G
    - id: Cost-2-A
      title: Estimate and track my costs.
      description: From the real experience, it is not easy to estimate cloud cost at the initial step of migration to the cloud. In many cases first calculation of cloud resources is quite inaccurate and relays more on more familiar and common on-prem approach. Two main pitfalls of the initial calculation are either cloud is much more expensive comparing to on-prem or it is cheaper but some services are missed from the calculation.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review estimating & comparing costs'
        url: /azure/architecture/framework/Cost/modeling#estimating-&-comparing-costs
        noneOf:
        - Cost.2.A
        - Cost.2.F
        anyOf:
        - Cost.2.A
        - Cost.2.B
        - Cost.2.C
        - Cost.2.D
        - Cost.2.E
    - id: Cost-2-B
      title: Educate the employees about the cloud and various pricing models.
      description: The Cloud brings a new set of technical capabilities and tools for your organization's technical staff, as well as your business users. Identify training requirements & associated costs for technical staff to perform Cloud migration projects and Cloud application development or re-architecture. Also include training initiatives to enable ongoing Cloud management (such as identity management, security configuration and response and systems monitoring and automation) or consider outsourcing alternatives.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review education'
        url: /azure/architecture/framework/Cost/modeling#education
        noneOf:
        - Cost.2.B
        - Cost.2.F
        anyOf:
        - Cost.2.A
        - Cost.2.B
        - Cost.2.C
        - Cost.2.D
        - Cost.2.E
    - id: Cost-2-C
      title: Have appropriate governance about expenditure.
      description: You will need to think about how to implement cloud cost governance controls (Azure Policy, Resource Tags, Budgets), including the Enterprise Scaffold.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review governance'
        url: /azure/architecture/framework/Cost/modeling#governance
        noneOf:
        - Cost.2.C
        - Cost.2.F
        anyOf:
        - Cost.2.A
        - Cost.2.B
        - Cost.2.C
        - Cost.2.D
        - Cost.2.E
    - id: Cost-2-D
      title: Treat resources as a utility
      description: The cloud is all about change. Your resources in the cloud are virtual, and unless built for durability, are to be considered ephemeral. Your provider may reboot or replace your resources for troubleshooting or updates. Mapping resources as 1 to 1 drop in replacement for on-prem resources is not recommended.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review treat resources as a utility'
        url: /azure/architecture/framework/Cost/modeling#treat-resources-as-a-utility
        noneOf:
        - Cost.2.D
        - Cost.2.F
        anyOf:
        - Cost.2.A
        - Cost.2.B
        - Cost.2.C
        - Cost.2.D
        - Cost.2.E
    - id: Cost-3-A
      title: Track how data flows in and out of Azure.
      description: Bandwidth refers to data moving in and out of Azure datacenters. Most of the time inbound data transfers (data going into Azure datacenters) are free. For outbound data transfers, data going out of Azure datacenters, the data transfer pricing is based on Billing Zones.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review optimize data transfer'
        url: /azure/architecture/framework/Cost/data-management#optimize-data-transfer
        noneOf:
        - Cost.3.A
        - Cost.3.E
        anyOf:
        - Cost.3.A
        - Cost.3.B
        - Cost.3.C
        - Cost.3.D
    - id: Cost-3-B
      title: Defined and enforce data retention and archival requirements.
      description: In typical systems, not all data needs to be available for online processing. Data no longer needed can be removed, freeing up underlying storage.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review data retention and archival'
        url: /azure/architecture/framework/Cost/data-management#data-retention-and-archival
        noneOf:
        - Cost.3.B
        - Cost.3.E
        anyOf:
        - Cost.3.A
        - Cost.3.B
        - Cost.3.C
        - Cost.3.D
    - id: Cost-3-C
      title: Spec-ed out the data storage and partitioned it correctly.
      description: Choosing an inappropriate data store or one that is mis-configured can have a huge cost impact on your design and you can save tens of thousands of dollars by getting the data tier correct. Consider storing binary image data, whilst it is certainly possible to store it in Azure SQL Database as a varbinary(MAX) column type, you should strongly consider storing the data in Azure Blob Storage Block Blobs and if your design requires SQL, then store a lookup table in SQL Database, and retrieve the document on the fly to serve it to the user in your application middle tier. This way the majority of your data capacity is consumed with fast, cost-effective blob storage that is a good few orders of magnitude cheaper than Azure SQL Database, but where needed â€“ your use of SQL Database is highly targeted to high speed data lookups and set-based operations, where SQL really shines. This pattern is called polyglot persistence and it doesn't just apply to PaaS services, consider that Azure â€˜Hot' Block Blob Storage costs around 1/50 of the cost of the equivalent size of the Premium SSD volume you would be placing the database on, and this model still applies even in an IaaS world.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review use the right type of data store and partition or scale it appropriately'
        url: /azure/architecture/framework/Cost/data-management#use-the-right-type-of-data-store-and-partition-or-scale-it-appropriately
        noneOf:
        - Cost.3.C
        - Cost.3.E
        anyOf:
        - Cost.3.A
        - Cost.3.B
        - Cost.3.C
        - Cost.3.D
    - id: Cost-4-A
      title: Watch my cloud costs.
      description: It's natural to reach for the invoice as the source of truth for your costs. Stakeholders should review this information in relation to other factors and data sources. Do you understand what your Cloud costs usually are? Do you know if there have been significant changes in either the business or the I.T. capabilities that may have contributed to a change in these costs? Make sure you identify which business-related data is relevant to your Cloud cost conversation, to ensure that all aspects are considered. In addition to detailed usage information on your invoice, Azure provides you with tools that surface information such as incurred costs and makes recommendations on cost savings (such as downsizing virtual machines). Nonetheless, it's important to consider building additional custom solutions to fully maximize cost savings where identifiable
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review gather information'
        url: /azure/architecture/framework/Cost/monitoring#gather-information
        noneOf:
        - Cost.4.A
        - Cost.4.F
        anyOf:
        - Cost.4.A
        - Cost.4.B
        - Cost.4.C
        - Cost.4.D
        - Cost.4.E
    - id: Cost-4-B
      title: Create and respond to cost alerts.
      description: You have established your cost budget amounts, time periods and email alerts. Like any systems monitoring, this may need refining over time. So what happens when one of those alerts lands in your Inbox? First, check the current consumption data. Budget alerts do not fire in real time and there may be a delay (up to 8 hrs) between this alert and your current incurred cost actuals. Is there any significant difference between the alert level and what you're seeing now? Then you'll need to gather the appropriate people to discuss the cost trend, possible causes and any required action. That is likely to include people like application owners, who should be clearly identifiable through appropriate resource tagging. Who else do you need to involve (for example, business department owners) to provide the bigger picture of why a budget limit has nearly been reached? Remember this isn't just a systems question â€“ it may also involve taking into account recent business activities which have been unexpectedly high.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review responding to cost alerts'
        url: /azure/architecture/framework/Cost/monitoring#responding-to-cost-alerts
        noneOf:
        - Cost.4.B
        - Cost.4.F
        anyOf:
        - Cost.4.A
        - Cost.4.B
        - Cost.4.C
        - Cost.4.D
        - Cost.4.E
    - id: Cost-4-C
      title: Perform cost reviews on a regular cadence.
      description: Effective ongoing cost management includes informed cost reviews with key stakeholders. These can happen on a regular cadence but may also be required reactively if the cost management tools alert to a potential cost issue, such as a budget limit being reached.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review performing cost reviews'
        url: /azure/architecture/framework/Cost/monitoring#performing-cost-reviews
        noneOf:
        - Cost.4.C
        - Cost.4.F
        anyOf:
        - Cost.4.A
        - Cost.4.B
        - Cost.4.C
        - Cost.4.D
        - Cost.4.E
    - id: Cost-4-D
      title: Defined budgets for my workload.
      description: After you identify and analyze your spending patterns, you can set budget limits for applications or business units. You will want to assign access to view or manage each budget to the appropriate groups. Setting several alert thresholds for each budget can help track your burn down rate.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review define budgets'
        url: /azure/architecture/framework/Cost/monitoring#define-budgets
        noneOf:
        - Cost.4.D
        - Cost.4.F
        anyOf:
        - Cost.4.A
        - Cost.4.B
        - Cost.4.C
        - Cost.4.D
        - Cost.4.E
    - id: Cost-5-A
      title: Analyze ROI regularly.
      description: Both TCO and ROI are key financial metrics that organizations may wish to quantify for their Cloud investment. In some cases, they are also looking to compare these metrics to existing on-premises equivalents. It can be a challenge to get these figures accurate though, due to several reasons on-premises TCO may not accurately account for â€˜hidden' expenses, such as under-utilization of purchased hardware or network maintenance costs (labor & equipment failure). Cloud TCO may not accurately account for a drop in the organization's operational labor hours, due to the Cloud provider's infrastructure or platform management services being included in the cloud service pricing or the additional operational efficiences of cloud tools.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review cost versus value'
        url: /azure/architecture/framework/Cost/tradeoffs#cost-versus-value
        noneOf:
        - Cost.5.A
        - Cost.5.G
        anyOf:
        - Cost.5.A
        - Cost.5.B
        - Cost.5.C
        - Cost.5.D
        - Cost.5.E
        - Cost.5.F
    - id: Cost-5-B
      title: Use different Azure datacenter locations to optimize cost.
      description: Azure has datacenters all over the world and each datacenter is placed within a zone within a region or just a region. Usage costs vary between locations that offer Azure products, services, and resources based on popularity, demand, and local infrastructure costs. Azure also offers differentiated cloud regions for specific security and compliance requirements. For example, you might want to build your Azure solution by provisioning resources in locations that offer the lowest prices, but this would require transferring data between locations if dependent resources and their users are in different parts of the world. If there are meters tracking the volume of data that moves between the resources you provision, any potential savings you make from choosing the cheapest location could be offset by the additional cost of transferring data between those resources.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review location'
        url: /azure/architecture/framework/Cost/tradeoffs#location
        noneOf:
        - Cost.5.B
        - Cost.5.G
        anyOf:
        - Cost.5.A
        - Cost.5.B
        - Cost.5.C
        - Cost.5.D
        - Cost.5.E
        - Cost.5.F
    - id: Cost-5-C
      title: Use Azure Marketplace.
      description: The Azure Marketplace offers both the Azure team's first-party products and services, as well as, services from third-party vendors. Different billing structures apply to each of these categories. The billing structures can range from free, PAYG, one-time purchase fee, or a managed offering with support and licensing monthly costs.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review marketplace'
        url: /azure/architecture/framework/Cost/tradeoffs#marketplace
        noneOf:
        - Cost.5.C
        - Cost.5.G
        anyOf:
        - Cost.5.A
        - Cost.5.B
        - Cost.5.C
        - Cost.5.D
        - Cost.5.E
        - Cost.5.F
    - id: Cost-5-D
      title: Track the resource tier and optimize appropriately.
      description: Costs are resource-specific, so the usage that a meter tracks and the number of meters associated with a resource depend on the resource type. The usage that a meter tracks correlates to several billable units. Those are charged to your account for each billing period, and the rate per billable unit depends on the resource type you are using. In some cases, there are also choices to be made about a resource type that impact the pricing, for example choosing to use a Standard HDD hard disk or a Premium SSD hard disk. Resource types will vary in features such as performance or availability, the design implications of which must be considered along with their cost. As a rule of thumb, start small for resources then scale the resource up as needed. For example, it's more cost effective to start with a small size in GB for a managed disk as you are incurring costs on the allocated storage vs. pay-per-GB model. Likewise, with ExpressRoute circuits start with a smaller bandwidth circuit and scale up as needed. In Azure it's generally easier to grow a service with little to no downtime vs. downscale a service, which usually requires deprovisioning or downtime.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review resource tier'
        url: /azure/architecture/framework/Cost/tradeoffs#resource-tier
        noneOf:
        - Cost.5.D
        - Cost.5.G
        anyOf:
        - Cost.5.A
        - Cost.5.B
        - Cost.5.C
        - Cost.5.D
        - Cost.5.E
        - Cost.5.F
    - id: Cost-5-E
      title: Take advantage of appropriate subscription offer types.
      description: Azure usage rates and billing periods can differ between Enterprise, Web Direct, and Cloud Solution Provider (CSP) customers based on specific subscription types as described on the Azure offer-details page. Some subscription types also include usage allowances or lower prices, which affect costs. For example, Azure Dev/Test subscription types offers lower prices on Azure services such as specific VM sizes, PaaS web apps and VM images with pre-installed software. On the other hand, Visual Studio subscribers obtain as part of their benefits access to Azure subscriptions with monthly allowances.
      iconUrl: /assessments/media/cost.svg
      links:
      - text: 'Review subscription offer type'
        url: /azure/architecture/framework/Cost/tradeoffs#subscription-offer-type
        noneOf:
        - Cost.5.E
        - Cost.5.G
        anyOf:
        - Cost.5.A
        - Cost.5.B
        - Cost.5.C
        - Cost.5.D
        - Cost.5.E
        - Cost.5.F
    - id: Scalability-0-A
      title: Have the right data store to match usage.
      description: Not surprisingly, the overall performance and scale of an application is often heavily weighted on the choice and implementation of the database and the overall data tier of the application. This is because database reads and writes involve a network call and storage IO, both of which are expense operations. Choosing the right database service to store and retrieve data is therefore a critical decision and must be carefully considered to ensure overall application scalability. Azure has many first party database services that will fit most needs. In addition there are a series of 3rd party options that can be considered from Azure Marketplace.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review choosing the right database'
        url: /azure/architecture/framework/Scalability/app-design#choosing-the-right-database
        noneOf:
        - Scalability.0.A
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-B
      title: Use dynamic service discovery for microservices applications.
      description: Clients of a service use either Client-side discovery or Server-side discovery to determine the location of a service instance to send requests. Service discovery is a process of figuring out how to connect to a service, and if done correctly, can lead to software that scales out as usage increases. Decomposing an application into microservices is a practice that can directly lead to native scalability given a service's ability to be scaled and updated individually. This level of decoupling is an architectural best practice. However, when many microservices are in play, managing, executing, and operationalizing the services becomes a bottleneck, leading to the incorporation of an orchestration platform like Kubernetes or Service Fabric. Both of these platforms provide built-in services for executing, scaling, and operating a microservices architecture; and one of those key services is discovery and finding where a particular service is running. The client of the service should not need to know or care where the service executes or how many instance of the service are executing. It is the job of the orchestration platform to connect the client to the service through a decoupled discovery services, such as DNS, that major orchestration platforms all provide. The reason incorporating dynamic service discovery can lead to scalability gains is that each service can then be sized independently with multiple instances without the service client having this knowledge or changing its interaction.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review dynamic service discovery for micro-services applications'
        url: /azure/architecture/framework/Scalability/app-design#dynamic-service-discovery-for-micro-services-applications
        noneOf:
        - Scalability.0.B
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-C
      title: Utilize connection pooling.
      description: Establishing connections to databases is typically a very expensive operation that involves establishing an authenticated network connection to the remote database server. Pooling and reusing cached connections for new database operations is a common best practice for improving both application performance and scalability. In many cases, a default pool size might only consist of a small handful of connections that performs quickly in basic test scenarios, but become a bottleneck under scale when the pool is exhausted. Establishing a pool size that maps to the number of concurrent transactions supported on each application instance is a best practice. Each database and application platform will have slightly different requirements for the right way to setup and leverage the pool. In all cases, testing is paramount to ensure a connection pool is properly established and working as designed under load.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review connection pooling'
        url: /azure/architecture/framework/Scalability/app-design#connection-pooling
        noneOf:
        - Scalability.0.C
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-D
      title: Compress data when appropriate.
      description: A well known optimization best practice for scaling web applications is to use a compression strategy to compress and bundle web pages or api responses. The idea here is to shrink the results returned from a page or api back to the browser or client app. This optimizes network traffic and accelerating the web application. .NET has built in framework support for this technique with GZip compression. The reason this can dramatically impact scale is the network optimization benefit means less socket processing for the web server reducing web server cpu utilization, shortening connections, and thus allowing the web server to handle more concurrent requests.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review data compression'
        url: /azure/architecture/framework/Scalability/app-design#data-compression
        noneOf:
        - Scalability.0.D
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-E
      title: Use locking to ensure consistency.
      description: When using a relational database behind an Azure hosted application, the app owners must ensure an appropriate consistency and isolation level when making database connections to achieve maximum performance and scale out. Consistency and isolation are two of the ACID database properties. Consistency is all about ensuring a transaction can rollback to a state before the transaction started. Isolation is all about ensuring an executing transaction remains isolated from other executing transactions. The settings of these ACID properties can dramatically affect the number of users that can concurrently use a cloud web application in parallel, and therefore needs to be carefully considered across the various exposed web pages and/or APIs.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review data locking'
        url: /azure/architecture/framework/Scalability/app-design#data-locking
        noneOf:
        - Scalability.0.E
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-F
      title: Use async calls and waits to prevent locks.
      description: When an application calls a remote service leveraging a synchronous call, some of resources on the client (i.e caller thread, network socket, etc) are blocked and unavailable for use elsewhere until the remote service invocation completes. This pattern is simple, but leads to obvious inefficiencies. Asynchronous programming is an alternative approach that enables a remote service to be executed without waiting and blocking resources on the client. This is a critical pattern for enabling cloud scalable software and is available in most modern programming languages and platforms.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review asynchronous programming'
        url: /azure/architecture/framework/Scalability/app-design#asynchronous-programming
        noneOf:
        - Scalability.0.F
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-G
      title: Use microservices when you can.
      description: Microservices is a software engineering technique to decompose software into isolated, fine grained, and loosely coupled modules that can independently deployed and independently versioned. One could say that microservices refines and builds on the "component" patterns from the 1990's and early 2000's such as COM (Component Object Model) for breaking up logic into interface exposed modules. With the internet taking center stage, component models were combined with web protocols and transitioned into Service Oriented Architecture, and ultimately Web Services. Microservices is a type of web service that is particularly optimized for high scale requirements. This is because microsevices are designed to be independent with both deployment and versioning, and therefore can be scaled independently. So when combined with an orchestration platform designed to execute and manage microservices such as Kubernetes or Service Fabric, individual services can be right sized, scaled up, scaled down, and dynamically configured to match user demand. Additionally, microservices can be built and run using cloud serverless platforms such as Azure Functions that can dynamically scale with a pay-per-use model.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review microservices'
        url: /azure/architecture/framework/Scalability/app-design#microservices
        noneOf:
        - Scalability.0.G
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-H
      title: Use queues.
      description: A variant to asynchronous programming discussed above, queuing services have long been used as a scalable mechanism to hand off processing work to a service. Called the Load Levelling pattern, highly scalable queuing services are natively supported in Azure. The queue is a storage buffer that sits between the caller and the processing service, takes requests, stores and queues the request, and provides services around the reliable delivery and management of the queued data. Queuing services have been in use for years with the likes of MSMQ (Microsoft Message Queue), MQSeries, and others; and cloud native  variants of queuing services have been part of Azure since its inception.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review queuing and batching requests'
        url: /azure/architecture/framework/Scalability/app-design#queuing-and-batching-requests
        noneOf:
        - Scalability.0.H
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-I
      title: Avoid sticky sessions and client affinity.
      description: To design a system to be horizontally scalable, avoid designing a web application that assumes requests have instance affinity. Stateless, or non-affinity applications, allow the hosting platform (App Services, Kubernetes, Service Fabric, other) to dynamically add or remove compute instances based on service metrics. This is called auto-scale and works differently depending on the service. A critical requirement for a web application or api to work in an auto-scalable environment is a stateless nature where the application saves its state to an external data store allowing the app platform to load-balance and route requests across the any of the clustered instances. This is advantageous for service self-healing, removing problematic compute instances, and enabling the latest platform innovation that leads to higher scale. For older applications running in App Services v1 platforms, avoid using the Application Request Routing (ARR) session affinity flag to force all requests back to the initial instance.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review session affinity'
        url: /azure/architecture/framework/Scalability/app-design#session-affinity
        noneOf:
        - Scalability.0.I
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-J
      title: Automatically scale when load increases.
      description: Many of the compute offerings in Azure offer auto-scale to ensure the right amount of resources are available mapping to service user demand. With auto-scale, your service can scale out to new compute instances during busy periods and scale back in during silent periods. This is critical for both the service user experience as well as offering cost savings for the service implementor. The way it works is metrics are collected for the resource (i.e. cpu, memory utilization) and the application (requests queued, requests per second). Rules can then be created off those metrics and/or time schedules to add/remove instances depending on how the rule evaluates. Many of the common Azure compute offerings support auto-scale. An App Services App Plan allows auto-scale rules to be set for scale-out and scale-in. Azure Kubernetes Service (AKS) offers two levels of auto-scale. Firstly, AKS provides horizontal auto-scale can be enabled on service containers to add more or less pod instances within the cluster. Secondly, AKS provides a cluster auto-scale on the agent VM instances running an agent node-pool to add more ore remove VM instances dynamically. Service Fabric has similar offerings and VM Scale Sets offers auto-scale capabilities for true IaaS scenarios. In addition, Azure App Gateway and Azure API Management are PaaS offerings for ingress services that also enable auto-scale. And lastly, Azure Functions, Azure Logic Apps, and App Services offer serverless pay-per-use consumption modelling that inherently provide auto-scale.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review autoscaling'
        url: /azure/architecture/framework/Scalability/app-design#autoscaling
        noneOf:
        - Scalability.0.J
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-0-K
      title: Use background jobs.
      description: Back in the 1990's and early 2000's, Enterprise Application Integration became a major topic for hooking systems together, creating and scheduling jobs and tasks. These platforms offered a series of connectors for working with common formats and protocols like EDI/X12/EDIFACT, SFTP, HL7, SWIFT, and SOAP; and managing long running processes that may span minutes/hours/days through workflow orchestration. Along with workflow, these integration tools solved app-to-app and business-to-business integration needs. Not surprisingly,these needs still exist in the cloud, but a scalable cloud native way of enabling these capabilities is paramount, and that's what the Logic Apps service enables in Azure. Logic Apps is a serverless consumption  (pay-per-use) service that enables a vast set of out-of-the-box ready-to-use connectors and a long-running workflow engine to quickly enable cloud-native integration needs. Logic Apps is flexible enough for a plethora of sceneries like running tasks/jobs, advanced scheduling, and triggering. It includes many of the format and protocol capabilities that existed in Microsoft's enterprise EAI product called BizTalk Server, and has advanced hosting options to allow it run within enterprise restricted cloud environments. Logic Apps compliments and can be combined with all other Azure services, or it can be used independently.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review background jobs'
        url: /azure/architecture/framework/Scalability/app-design#background-jobs
        noneOf:
        - Scalability.0.K
        - Scalability.0.M
        anyOf:
        - Scalability.0.A
        - Scalability.0.B
        - Scalability.0.C
        - Scalability.0.D
        - Scalability.0.E
        - Scalability.0.F
        - Scalability.0.G
        - Scalability.0.H
        - Scalability.0.I
        - Scalability.0.J
        - Scalability.0.K
        - Scalability.0.L
    - id: Scalability-1-A
      title: Have well-defined performance goals.
      description: Defining performance goals allows you to build architecture that aligns to your business needs.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review defining performance goals'
        url: /azure/architecture/framework/Scalability/performance#defining-performance-goals
        noneOf:
        - Scalability.1.A
        - Scalability.1.G
        anyOf:
        - Scalability.1.A
        - Scalability.1.B
        - Scalability.1.C
        - Scalability.1.D
        - Scalability.1.E
        - Scalability.1.F
    - id: Scalability-1-B
      title: Use horizontal scaling when possible.
      description: Horizontal scaling allows you to dynamically add and remove resources based on demand. Also called scaling out and in, means adding or removing instances of a resource. The application continues running without interruption as new resources are provisioned. When the provisioning process is complete, the solution is deployed on these additional resources. If demand drops, the additional resources can be shut down cleanly and deallocated.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review horizontal scaling'
        url: /azure/architecture/framework/Scalability/performance#horizontal-scaling
        noneOf:
        - Scalability.1.B
        - Scalability.1.G
        anyOf:
        - Scalability.1.A
        - Scalability.1.B
        - Scalability.1.C
        - Scalability.1.D
        - Scalability.1.E
        - Scalability.1.F
    - id: Scalability-1-C
      title: Have policies to scale in and scale down when my load decreases.
      description: Scaling in removes unused resources when they become idle.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review scaling down when load decreases'
        url: /azure/architecture/framework/Scalability/performance#scaling-down-when-load-decreases
        noneOf:
        - Scalability.1.C
        - Scalability.1.G
        anyOf:
        - Scalability.1.A
        - Scalability.1.B
        - Scalability.1.C
        - Scalability.1.D
        - Scalability.1.E
        - Scalability.1.F
    - id: Scalability-1-D
      title: Understand the performance bottlenecks.
      description: Understanding your performance bottlenecks is critical for designing systems that will have variable throughput over time. Performance tests are crucial for getting baseline performance metrics. But you must be prepared to observe and correct performance issues when they arise in the live system.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review performance bottlenecks'
        url: /azure/architecture/framework/Scalability/performance#performance-bottlenecks
        noneOf:
        - Scalability.1.D
        - Scalability.1.G
        anyOf:
        - Scalability.1.A
        - Scalability.1.B
        - Scalability.1.C
        - Scalability.1.D
        - Scalability.1.E
        - Scalability.1.F
    - id: Scalability-1-E
      title: Use idempotent operations.
      description: When possible, design operations to be idempotent. That way, they can be handled using at-least-once semantics. If a worker crashes in the middle of an operation, another worker simply picks up the work item.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review idempotency'
        url: /azure/architecture/framework/Scalability/performance#idempotency
        noneOf:
        - Scalability.1.E
        - Scalability.1.G
        anyOf:
        - Scalability.1.A
        - Scalability.1.B
        - Scalability.1.C
        - Scalability.1.D
        - Scalability.1.E
        - Scalability.1.F
    - id: Scalability-2-A
      title: Run tests at peak load.
      description: You should load test your application at the expected peak load to ensure there are no challenges around performance or stability when operating at full capacity.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review scalability concept'
        url: /azure/architecture/framework/Scalability/load-testing#
        noneOf:
        - Scalability.2.A
        - Scalability.2.D
        anyOf:
        - Scalability.2.A
        - Scalability.2.B
        - Scalability.2.C
    - id: Scalability-2-B
      title: Have awareness about the time taken to scale in response to events.
      description: Knowing how long it takes to scale allows you to understand how quickly you can adapt to changes in demand. Scale quick enough to meet user demand, but not so quick that you end up with many unused resources.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review responding quickly to additional load'
        url: /azure/architecture/framework/Scalability/load-testing#responding-quickly-to-additional-load
        noneOf:
        - Scalability.2.B
        - Scalability.2.D
        anyOf:
        - Scalability.2.A
        - Scalability.2.B
        - Scalability.2.C
    - id: Scalability-3-A
      title: Use a Content Delivery Networks (CDN) if applicable.
      description: Consider storing static or relatively static public content, such as images, resources, scripts, and style sheets, in blob storage. This approach relieves the application of the load caused by dynamically generating this content for each request. Additionally, consider using the Content Delivery Network to cache this content and deliver it to clients. Using the Content Delivery Network can improve performance at the client because the content is delivered from the geographically closest datacenter that contains a Content Delivery Network cache.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review content delivery networks (cdn)'
        url: /azure/architecture/framework/Scalability/capacity#content-delivery-networks-(cdn)
        noneOf:
        - Scalability.3.A
        - Scalability.3.G
        anyOf:
        - Scalability.3.A
        - Scalability.3.B
        - Scalability.3.C
        - Scalability.3.D
        - Scalability.3.E
        - Scalability.3.F
    - id: Scalability-3-B
      title: Have a strategy in place to manage events that may cause a spike in load.
      description: Work with your business and marketing teams to prepare for large scale events. Knowing if there will be sudden spikes in traffic (Superbowl, Black Friday, or Marketing pushes) can allow you to prepare your infrastructure ahead of time.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review large scale event management'
        url: /azure/architecture/framework/Scalability/capacity#large-scale-event-management
        noneOf:
        - Scalability.3.B
        - Scalability.3.G
        anyOf:
        - Scalability.3.A
        - Scalability.3.B
        - Scalability.3.C
        - Scalability.3.D
        - Scalability.3.E
        - Scalability.3.F
    - id: Scalability-3-C
      title: Optimized resource choices (vm, database sizing, etc) to match the needs of my application.
      description: Right sizing your infrastructure to meet the needs of your applications can save you considerably as opposed to a 'one size fits all' solution often employed with on-premises hardware. Identify the needs of your application and choose the resources that best fit those needs.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review choosing the right resources'
        url: /azure/architecture/framework/Scalability/capacity#choosing-the-right-resources
        noneOf:
        - Scalability.3.C
        - Scalability.3.G
        anyOf:
        - Scalability.3.A
        - Scalability.3.B
        - Scalability.3.C
        - Scalability.3.D
        - Scalability.3.E
        - Scalability.3.F
    - id: Scalability-3-D
      title: Configured scaling policies by using the appropriate metrics.
      description: Autoscaling rules that use a detection mechanism based on a measured trigger attribute (such as CPU usage or queue length) use an aggregated value over time, rather than instantaneous values, to trigger an autoscaling action. By default, the aggregate is an average of the values. This prevents the system from reacting too quickly, or causing rapid oscillation.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review choosing metrics for scaling policies'
        url: /azure/architecture/framework/Scalability/capacity#choosing-metrics-for-scaling-policies
        noneOf:
        - Scalability.3.D
        - Scalability.3.G
        anyOf:
        - Scalability.3.A
        - Scalability.3.B
        - Scalability.3.C
        - Scalability.3.D
        - Scalability.3.E
        - Scalability.3.F
    - id: Scalability-3-E
      title: Automatically schedule autoscaling to add resources based on time of day trends.
      description: Preemptively scaling based on historical data can ensure your application is performant before your metrics indicate additional resources are required. Consider whether you can predict the load on the application well enough to use scheduled autoscaling, adding and removing instances to meet anticipated peaks in demand.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review preemptively scaling based on trends'
        url: /azure/architecture/framework/Scalability/capacity#preemptively-scaling-based-on-trends
        noneOf:
        - Scalability.3.E
        - Scalability.3.G
        anyOf:
        - Scalability.3.A
        - Scalability.3.B
        - Scalability.3.C
        - Scalability.3.D
        - Scalability.3.E
        - Scalability.3.F
    - id: Scalability-4-A
      title: Design for eventual consistency.
      description: Eventual consistency improves scalability by reducing or removing the time needed to synchronize related data partitioned across multiple stores. The cost is that data is not always consistent when it is read, and some write operations may cause conflicts. Eventual consistency is ideal for situations where the same data is read frequently but written infrequently.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review design for eventual consistency'
        url: /azure/architecture/framework/Scalability/data-management#design-for-eventual-consistency
        noneOf:
        - Scalability.4.A
        - Scalability.4.H
        anyOf:
        - Scalability.4.A
        - Scalability.4.B
        - Scalability.4.C
        - Scalability.4.D
        - Scalability.4.E
        - Scalability.4.F
        - Scalability.4.G
    - id: Scalability-4-B
      title: Use sharding for database storage when appropriate.
      description: Divide the data across multiple databases and database servers, or design the application to use data storage services that can provide this partitioning transparently (examples include Azure SQL Database Elastic Database, and Azure Table storage). This approach can help to maximize performance and allow easier scaling. There are different partitioning techniques, such as horizontal, vertical, and functional. You can use a combination of these to achieve maximum benefit from increased query performance, simpler scalability, more flexible management, better availability, and to match the type of store to the data it will hold. Also, consider using different types of data store for different types of data, choosing the types based on how well they are optimized for the specific type of data. This may include using table storage, a document database, or a column-family data store, instead of, or as well as, a relational database.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review database sharding'
        url: /azure/architecture/framework/Scalability/data-management#database-sharding
        noneOf:
        - Scalability.4.B
        - Scalability.4.H
        anyOf:
        - Scalability.4.A
        - Scalability.4.B
        - Scalability.4.C
        - Scalability.4.D
        - Scalability.4.E
        - Scalability.4.F
        - Scalability.4.G
    - id: Scalability-4-C
      title: Minimize the load on the data store.
      description: The data store is commonly a processing bottleneck, a costly resource, and often not easy to scale out. Where possible, remove logic (such as processing XML documents or JSON objects) from the data store, and perform processing within the application. For example, instead of passing XML to the database (other than as an opaque string for storage), serialize or deserialize the XML within the application layer and pass it in a form that is native to the data store. It's typically much easier to scale out the application than the data store, so you should attempt to do as much of the compute-intensive processing as possible within the application.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review managing database load'
        url: /azure/architecture/framework/Scalability/data-management#managing-database-load
        noneOf:
        - Scalability.4.C
        - Scalability.4.H
        anyOf:
        - Scalability.4.A
        - Scalability.4.B
        - Scalability.4.C
        - Scalability.4.D
        - Scalability.4.E
        - Scalability.4.F
        - Scalability.4.G
    - id: Scalability-4-D
      title: Normalize the data appropriately.
      description: Data normalization helps to avoid duplication and inconsistency. However, maintaining multiple indexes, checking for referential integrity, performing multiple accesses to small chunks of data, and joining tables to reassemble the data imposes an overhead that can affect performance. Consider if some additional storage volume and duplication is acceptable in order to reduce the load on the data store. Also consider if the application itself (which is typically easier to scale) can be relied on to take over tasks such as managing referential integrity in order to reduce the load on the data store.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review data consistency'
        url: /azure/architecture/framework/Scalability/data-management#data-consistency
        noneOf:
        - Scalability.4.D
        - Scalability.4.H
        anyOf:
        - Scalability.4.A
        - Scalability.4.B
        - Scalability.4.C
        - Scalability.4.D
        - Scalability.4.E
        - Scalability.4.F
        - Scalability.4.G
    - id: Scalability-4-E
      title: Optimize database queries and indexes.
      description: Some T-SQL statements or constructs may have an adverse effect on performance that can be reduced by optimizing the code in a stored procedure. For example, avoid converting datetime types to a varchar before comparing with a datetime literal value. Use date/time comparison functions instead. Lack of appropriate indexes can also slow query execution. If you use an object/relational mapping framework, understand how it works and how it may affect performance of the data access layer.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review database query optimimization'
        url: /azure/architecture/framework/Scalability/data-management#database-query-optimimization
        noneOf:
        - Scalability.4.E
        - Scalability.4.H
        anyOf:
        - Scalability.4.A
        - Scalability.4.B
        - Scalability.4.C
        - Scalability.4.D
        - Scalability.4.E
        - Scalability.4.F
        - Scalability.4.G
    - id: Scalability-4-F
      title: Document plans for data growth and retention.
      description: The amount of data stored by an application grows over time. This growth increases storage costs as well as latency when accessing the data, affecting application throughput and performance. It may be possible to periodically archive some of the old data that is no longer accessed, or move data that is rarely accessed into long-term storage that is more cost efficient, even if the access latency is higher.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review planning for data growth'
        url: /azure/architecture/framework/Scalability/data-management#planning-for-data-growth
        noneOf:
        - Scalability.4.F
        - Scalability.4.H
        anyOf:
        - Scalability.4.A
        - Scalability.4.B
        - Scalability.4.C
        - Scalability.4.D
        - Scalability.4.E
        - Scalability.4.F
        - Scalability.4.G
    - id: Scalability-5-A
      title: Track when resources scale in and out.
      description: Azure service scale in a variety of different ways, for example, App Services, ASE and VM ScaleSets can be configured with auto-scaling rules that can be based on several metrics including CPU, memory, bandwidth, etc. These rules can create new instances (scale in) or remove instances (scale in) or a running service. This capability can be enhanced by generating custom events from technologies like Application Insight that could be based on some other custom metrics. Azure Kubernetes Services offers both the ability to scale pods as well as to auto scale nodes. Scaling rules can be based on internal metrics or can leverage metrics from systems like Prometheus. Other services, such as Application Gateway, can be scaled manually. In this case, it is important to leverage services such as Log Analytics to raise alerts when the service is no longer able to handle the load.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review how do azure service auto scale'
        url: /azure/architecture/framework/Scalability/monitoring#how-do-azure-service-auto-scale
        noneOf:
        - Scalability.5.A
        - Scalability.5.D
        anyOf:
        - Scalability.5.A
        - Scalability.5.B
        - Scalability.5.C
    - id: Scalability-5-B
      title: Have an overall monitoring strategy for scalability.
      description: The overall monitoring strategy should take into consideration not only scalability, but resiliency (infrastructure, application and dependent services) and application performance as well. Most services in Azure offer the ability to turn on both data and management plane logs as well as metrics.
      iconUrl: /assessments/media/scalability.svg
      links:
      - text: 'Review scalability concept'
        url: /azure/architecture/framework/Scalability/monitoring#
        noneOf:
        - Scalability.5.B
        - Scalability.5.D
        anyOf:
        - Scalability.5.A
        - Scalability.5.B
        - Scalability.5.C
    - id: DevOps-0-A
      title: Leverage containers in your workload appropriately.
      description: Containers make it easy for you to continuously build and deploy applications. By orchestrating the deployment of those containers using Azure Kubernetes Service (AKS), you can achieve replicable, manageable clusters of containers. By setting up a continuous build to produce your container images and orchestration, Azure DevOps increases the speed and reliability of your deployment.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review containerization'
        url: /azure/architecture/framework/DevOps/app-design#containerization
        noneOf:
        - DevOps.0.A
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-0-B
      title: Treat your infrastructure as if it were code.
      description: Infrastructure as Code (IaC) is the management of infrastructure (networks, virtual machines, load balancers, and connection topology) in a descriptive model, using the same versioning as DevOps team uses for source code. The most reliable deployment processes are automated and idempotent â€” that is, repeatable to produce the same results.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review infrastructure as code'
        url: /azure/architecture/framework/DevOps/app-design#infrastructure-as-code
        noneOf:
        - DevOps.0.B
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-0-C
      title: Track the dependencies of your workload.
      description: Use Azure Resource Manager templates to define dependencies for resources that are deployed in the same template. For a given resource, there can be other resources that must exist before the resource is deployed. For example, a SQL server must exist before attempting to deploy a SQL database. You define this relationship by marking one resource as dependent on the other resource. Resource Manager evaluates the dependencies between resources, and deploys them in their dependent order.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review dependency tracking'
        url: /azure/architecture/framework/DevOps/app-design#dependency-tracking
        noneOf:
        - DevOps.0.C
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-0-D
      title: Aware of your resource limits in Azure.
      description: Azure Resource Manager (ARM) enforces limits and quotas on how many resources of each type you can provision per Azure Subscription, and even per Azure Region. Some limits are a hard maximum, while others are a soft limit that can be increases upon request through a support case at no charge. When working with Virtual Machines, App Service, Storage Accounts, Databases, and other resources in Azure you can easily hit up against these limits, so itâ€™s important to know they exist and how to work around them.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review limits'
        url: /azure/architecture/framework/DevOps/app-design#limits
        noneOf:
        - DevOps.0.D
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-0-E
      title: Tag and name your resources in a consistent fashion.
      description: Organizing cloud-based assets in ways that aid operational management and support accounting requirements is a common challenge that faces large cloud adoption efforts. By applying well-defined naming and metadata tagging conventions to cloud-hosted resources, IT staff can quickly find and manage resources. Well-defined names and tags also help to align cloud usage costs with business teams by using chargeback and showback accounting mechanisms.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review tagging and resource naming'
        url: /azure/architecture/framework/DevOps/app-design#tagging-and-resource-naming
        noneOf:
        - DevOps.0.E
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-0-F
      title: Isolate my workloads.
      description: The term workload is typically defined as an arbitrary unit of functionality, such as an application or service. In the cloud a workload not only encompasses all the artifacts, but it also includes the cloud resources as well. This enables you to define a workload in terms of code artifacts and the necessary cloud resources, thus further enabling you to isolate workloads. You can isolate workloads by the way resources are organized, by network topology, or by other attributes. A basic workload is typically defined as a single web application or a virtual network (VNet) with virtual machine (VM).
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review workload isolation'
        url: /azure/architecture/framework/DevOps/app-design#workload-isolation
        noneOf:
        - DevOps.0.F
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-0-G
      title: Have an orchestration system in place to deploy my application.
      description: Because of their small size and application orientation, containers are well suited for agile delivery environments and microservice-based architectures. The task of automating and managing a large number of containers and how they interact is known as orchestration. While there are multiple container orchestrators are available, it's critical to select right container orchestrator based on your workload requirements, team's skill set, timeline to ramp up & support production workload, etc. One of the popular container orchestration system is Kubernetes and Azure provides managed kubernetes cluster using AKS service.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review orchestration system'
        url: /azure/architecture/framework/DevOps/app-design#orchestration-system
        noneOf:
        - DevOps.0.G
        - DevOps.0.I
        anyOf:
        - DevOps.0.A
        - DevOps.0.B
        - DevOps.0.C
        - DevOps.0.D
        - DevOps.0.E
        - DevOps.0.F
        - DevOps.0.G
        - DevOps.0.H
    - id: DevOps-1-A
      title: Automated manual tasks.
      description: Use automation runbooks with hybrid runbook worker to unify management by orchestrating across on- premises environments. Use webhooks to provide a way to fulfill requests and ensure continuous delivery and operations by triggering automation from ITSM, DevOps, and monitoring systems.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review automation of manual tasks'
        url: /azure/architecture/framework/DevOps/configuration#automation-of-manual-tasks
        noneOf:
        - DevOps.1.A
        - DevOps.1.F
        anyOf:
        - DevOps.1.A
        - DevOps.1.B
        - DevOps.1.C
        - DevOps.1.D
        - DevOps.1.E
    - id: DevOps-1-B
      title: Monitor and update machine configurations.
      description: Use Azure Automation State Configuration to provide configuration management required for enterprise environments.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review monitor and update machine configuration'
        url: /azure/architecture/framework/DevOps/configuration#monitor-and-update-machine-configuration
        noneOf:
        - DevOps.1.B
        - DevOps.1.F
        anyOf:
        - DevOps.1.A
        - DevOps.1.B
        - DevOps.1.C
        - DevOps.1.D
        - DevOps.1.E
    - id: DevOps-1-C
      title: Schedule deployments.
      description: Employ Update Management to manage VM updates in Azure, on- premises, or in other cloud providers.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review schedule deployments'
        url: /azure/architecture/framework/DevOps/configuration#schedule-deployments
        noneOf:
        - DevOps.1.C
        - DevOps.1.F
        anyOf:
        - DevOps.1.A
        - DevOps.1.B
        - DevOps.1.C
        - DevOps.1.D
        - DevOps.1.E
    - id: DevOps-1-D
      title: Deploy, manage, and monitor my workload as a group rather than handling its components individually.
      description: Use Azure Resource Manager to define the dependencies between resources so they're deployed in the correct order.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review deploy, manage, and monitor your workload as a group'
        url: /azure/architecture/framework/DevOps/configuration#deploy,-manage,-and-monitor-your-workload-as-a-group
        noneOf:
        - DevOps.1.D
        - DevOps.1.F
        anyOf:
        - DevOps.1.A
        - DevOps.1.B
        - DevOps.1.C
        - DevOps.1.D
        - DevOps.1.E
    - id: DevOps-2-A
      title: Document the release process.
      description: Without detailed release process documentation, an operator might deploy a bad update or might improperly configure settings for your application. Clearly define and document your release process, and ensure that it's available to the entire operations team.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review document release process'
        url: /azure/architecture/framework/DevOps/deployment#document-release-process
        noneOf:
        - DevOps.2.A
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-2-B
      title: Use automation to deploy and update my workload.
      description: To activate resources on demand, deploy solutions rapidly, minimize human error, and produce consistent and repeatable results, be sure to automate deployments and updates. As a best practice, create a repository of categorized automation scripts for quick access, documented with explanations of parameters and examples of script use. Keep this documentation in sync with your Azure deployments, and designate a primary person to manage the repository.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review automation'
        url: /azure/architecture/framework/DevOps/deployment#automation
        noneOf:
        - DevOps.2.B
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-2-C
      title: Have a release process for my workload.
      description: One of the challenges with automating deployment is the cut-over itself, taking software from the final stage of testing to live production. You usually need to do this quickly in order to minimize downtime. The blue-green deployment approach does this by ensuring you have two production environments, as identical as possible.  One method that you can leverage to do this is use VSTS release management for end-to-end traceability. Utilize VSTS history and auditing for a consolidated view of changes to code and infrastructure.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review release process'
        url: /azure/architecture/framework/DevOps/deployment#release-process
        noneOf:
        - DevOps.2.C
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-2-D
      title: Track the release of new code as it progresses through different stages.
      description: With good use of staging and production environments, you can push updates to the production environment in a highly controlled way and minimize disruption from unanticipated deployment issues.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review stage your workloads'
        url: /azure/architecture/framework/DevOps/deployment#stage-your-workloads
        noneOf:
        - DevOps.2.D
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-2-E
      title: Audit and track changes in my code and infrastructure.
      description: To capture as much version-specific information as possible, implement a robust logging strategy. If you use staged deployment techniques, more than one version of your application will be running in production. If a problem occurs, determine which version is causing it.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review logging and auditing'
        url: /azure/architecture/framework/DevOps/deployment#logging-and-auditing
        noneOf:
        - DevOps.2.E
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-2-F
      title: Have a rollback plan for each deployment.
      description: The most important step is to implement an architecture that supports the need to rollback. For instance, componentized, service based architectures lend themselves well to this. Persistent message queues and asynchronous services allow you to bring components down for rollback without impacting the main user base. Work towards something like the Blue-Green release pattern such that your application can stay available whilst you are working on one half of the system.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review rollback plan'
        url: /azure/architecture/framework/DevOps/deployment#rollback-plan
        noneOf:
        - DevOps.2.F
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-2-G
      title: Have knowledge of portions of my workload that need to be highly available and have an appropriate deployment strategy.
      description: An application that depends on a single instance of a service creates a single point of failure. To improve resiliency and scalability, provision multiple instances. Two strategies that you can leverage to do this are deploying across multiple regions and redeploy your workload to a secondary region on failures.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review deploy to multiple regions and instances'
        url: /azure/architecture/framework/DevOps/deployment#deploy-to-multiple-regions-and-instances
        noneOf:
        - DevOps.2.G
        - DevOps.2.I
        anyOf:
        - DevOps.2.A
        - DevOps.2.B
        - DevOps.2.C
        - DevOps.2.D
        - DevOps.2.E
        - DevOps.2.F
        - DevOps.2.G
        - DevOps.2.H
    - id: DevOps-3-A
      title: Use environments for dev and test stages that simulate a production environment.
      description: Its paramount to maintain production like environment especially when you run in to issues in production and you want to release hot fixes/updates quickly. If you follow some of the best practices mentioned in the app-design section like Infrastructure as Code (IaC) & CI/CD process you can easily & swiftly spin up/tear down your environment as needed.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review production like environment for dev/test'
        url: /azure/architecture/framework/DevOps/development#production-like-environment-for-dev/test
        noneOf:
        - DevOps.3.A
        - DevOps.3.G
        anyOf:
        - DevOps.3.A
        - DevOps.3.B
        - DevOps.3.C
        - DevOps.3.D
        - DevOps.3.E
        - DevOps.3.F
    - id: DevOps-3-B
      title: Instrumented my workload so view metrics in Azure Application Insights.
      description: Insights provide a customized monitoring experience for particular applications and services. Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for web developers on multiple platforms. Use it to monitor your live web application. It will automatically detect performance anomalies.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review application instrumentation for insight'
        url: /azure/architecture/framework/DevOps/development#application-instrumentation-for-insight
        noneOf:
        - DevOps.3.B
        - DevOps.3.G
        anyOf:
        - DevOps.3.A
        - DevOps.3.B
        - DevOps.3.C
        - DevOps.3.D
        - DevOps.3.E
        - DevOps.3.F
    - id: DevOps-3-C
      title: Manage and actively resolve the technical debt of the workload.
      description: Technical debt includes anything the team must do to deploy production quality code and keep it running in production. Examples are bugs, performance issues, operational issues, not having unit tests (necessary for refactoring code), accessibility, and others. SonarQube is a specific example of a tool that provides a set of static analyzers that can be used to identify areas of improvement in your code. It allows you to analyze the technical debt in your project and keep track of it in the future.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review technical debt'
        url: /azure/architecture/framework/DevOps/development#technical-debt
        noneOf:
        - DevOps.3.C
        - DevOps.3.G
        anyOf:
        - DevOps.3.A
        - DevOps.3.B
        - DevOps.3.C
        - DevOps.3.D
        - DevOps.3.E
        - DevOps.3.F
    - id: DevOps-3-D
      title: Have pipelines for continuous deployment/continuous integration.
      description: Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early. The key details to note are that you need to run code integration multiple times a day, every day, and you need to run the automated verification of the integration. Whatâ€™s the motivation for this? Well, in the development process, the earlier we surface errors, the better. And one source of frequently occurring errors is the code integration step.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review continous deployment / continous integration'
        url: /azure/architecture/framework/DevOps/development#continous-deployment-/-continous-integration
        noneOf:
        - DevOps.3.D
        - DevOps.3.G
        anyOf:
        - DevOps.3.A
        - DevOps.3.B
        - DevOps.3.C
        - DevOps.3.D
        - DevOps.3.E
        - DevOps.3.F
    - id: DevOps-3-E
      title: Use feature flags to add new features.
      description: Using feature flags is a technique that will help you integrate code into a shared repository at least once a day and ship it, even if you haven't finished the feature yet. You'll be able to deploy at any time but defer the decision to release for another day.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review feature flags'
        url: /azure/architecture/framework/DevOps/development#feature-flags
        noneOf:
        - DevOps.3.E
        - DevOps.3.G
        anyOf:
        - DevOps.3.A
        - DevOps.3.B
        - DevOps.3.C
        - DevOps.3.D
        - DevOps.3.E
        - DevOps.3.F
    - id: DevOps-4-A
      title: Implement alerting and monitoring for the DevOps infrastructure of the workload.
      description: Azure Monitor maximizes the availability and performance of your applications and services by delivering a comprehensive solution for collecting, analyzing, and acting on telemetry from your cloud and on-premises environments. It helps you understand how your applications are performing and proactively identifies issues affecting them and the resources they depend on. Just a few examples of what you can do with Azure Monitor include detect and diagnose issues across applications and dependencies with Application Insights, correlate infrastructure issues with Azure Monitor for VMs and Azure Monitor for Containers, drill into your monitoring data with Log Analytics for troubleshooting and deep diagnostics, support operations at scale with smart alerts and automated actions, create visualizations with Azure dashboards and workbooks.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review implemented alerting and monitoring'
        url: /azure/architecture/framework/DevOps/monitoring#implemented-alerting-and-monitoring
        noneOf:
        - DevOps.4.A
        - DevOps.4.H
        anyOf:
        - DevOps.4.A
        - DevOps.4.B
        - DevOps.4.C
        - DevOps.4.D
        - DevOps.4.E
        - DevOps.4.F
        - DevOps.4.G
    - id: DevOps-4-B
      title: Correlate events between the different application tiers.
      description: One critical advantage of Azure Monitor is that it is the monitoring tool for the whole Azure platform. As the previous sections has shown, Azure Monitor holds metrics and logs relevant to your application code, the platform where it is running, the data components, as well as the network connecting the application to its users. This enables operators to compare metrics of different application components to each other, and find out dependencies that might have been hidden otherwise. Dashboards in Azure offer an great way of exposing the rich information contained in Azure Monitor to other users. Make sure to create shared dashboards in order to expose relevant information to the different groups involved in operating your application, including Developers and Operators. If more complex visualizations are required, Azure Monitor data can be exported to PowerBI for advanced data analysis.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review event correlation'
        url: /azure/architecture/framework/DevOps/monitoring#event-correlation
        noneOf:
        - DevOps.4.B
        - DevOps.4.H
        anyOf:
        - DevOps.4.A
        - DevOps.4.B
        - DevOps.4.C
        - DevOps.4.D
        - DevOps.4.E
        - DevOps.4.F
        - DevOps.4.G
    - id: DevOps-4-C
      title: Log for all deployments.
      description: A logging tool should collect logs from each system component, application-side or server-side, and provide access to them in one centralized location. Not all logging platforms are capable of maintaining speed as the amount of logs they process grows. Therefore, you should keep a critical eye on the process when trying out different solutions.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review logging'
        url: /azure/architecture/framework/DevOps/monitoring#logging
        noneOf:
        - DevOps.4.C
        - DevOps.4.H
        anyOf:
        - DevOps.4.A
        - DevOps.4.B
        - DevOps.4.C
        - DevOps.4.D
        - DevOps.4.E
        - DevOps.4.F
        - DevOps.4.G
    - id: DevOps-4-D
      title: Track deployment metrics.
      description: Dev ops metrics are critical for measuring production and project management. Use Azure Monitor for collection of metrics, activity logs, and diagnostic logs.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review metrics'
        url: /azure/architecture/framework/DevOps/monitoring#metrics
        noneOf:
        - DevOps.4.D
        - DevOps.4.H
        anyOf:
        - DevOps.4.A
        - DevOps.4.B
        - DevOps.4.C
        - DevOps.4.D
        - DevOps.4.E
        - DevOps.4.F
        - DevOps.4.G
    - id: DevOps-4-E
      title: Report and set notifications for events.
      description: Use Azure dashboards to combine data into a single pane and share it with multiple stakeholders. Export Log Analytics data to Power BI to create additional visualizations.  Azure alerts are created to provide notifications when something goes wrong.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review reporting'
        url: /azure/architecture/framework/DevOps/monitoring#reporting
        noneOf:
        - DevOps.4.E
        - DevOps.4.H
        anyOf:
        - DevOps.4.A
        - DevOps.4.B
        - DevOps.4.C
        - DevOps.4.D
        - DevOps.4.E
        - DevOps.4.F
        - DevOps.4.G
    - id: DevOps-4-F
      title: Monitor underlying services.
      description: Use Azure Service Health to identify issues with services affecting application and plan for scheduled maintenance.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review underlying services'
        url: /azure/architecture/framework/DevOps/monitoring#underlying-services
        noneOf:
        - DevOps.4.F
        - DevOps.4.H
        anyOf:
        - DevOps.4.A
        - DevOps.4.B
        - DevOps.4.C
        - DevOps.4.D
        - DevOps.4.E
        - DevOps.4.F
        - DevOps.4.G
    - id: DevOps-5-A
      title: Have a branching strategy and adhere to its requirements.
      description: Consider adopting a strategy that leverages features and release branches. Each new feature should reside in its own branch, which can be pushed to the central repository for backup/collaboration. But, instead of branching off of master, feature branches use develop as their parent branch. When a feature is complete, it gets merged back into develop. Features should never interact directly with master. Once develop has acquired enough features for a release (or a predetermined release date is approaching), you fork a release branch off of develop.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review branching strategies'
        url: /azure/architecture/framework/DevOps/process#branching-strategies
        noneOf:
        - DevOps.5.A
        - DevOps.5.E
        anyOf:
        - DevOps.5.A
        - DevOps.5.B
        - DevOps.5.C
        - DevOps.5.D
    - id: DevOps-5-B
      title: Track and publish the roadmap.
      description: Publishing a single source of truth for all stakeholders to avoid mismatched expectations and to give an accurate picture of the current status.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review roadmap'
        url: /azure/architecture/framework/DevOps/process#roadmap
        noneOf:
        - DevOps.5.B
        - DevOps.5.E
        anyOf:
        - DevOps.5.A
        - DevOps.5.B
        - DevOps.5.C
        - DevOps.5.D
    - id: DevOps-5-C
      title: Continuously improve the operational posture.
      description: After each sprint (and outage) you hold a retrospective to find ways to be more effective. After an outage occurs you use a methodology to find the root cause and address that so the workload continuously improves.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review continous improvement'
        url: /azure/architecture/framework/DevOps/process#continous-improvement
        noneOf:
        - DevOps.5.C
        - DevOps.5.E
        anyOf:
        - DevOps.5.A
        - DevOps.5.B
        - DevOps.5.C
        - DevOps.5.D
    - id: DevOps-6-A
      title: Perform business continuity drills.
      description: Certain infrastructure test scenarios can be considered under the category of acceptance testing, such as Business Continuity drills. In particular Disaster Recovery scenarios are extremely difficult to test on-premises, but the public cloud makes this kind of tests easier. Tools such as Azure Site Recovery make it possible starting an isolated copy of the primary location in a secondary environment, so that it can be verified that the applications have come up as they should. In case there is any problem, the Disaster Recovery procedure can be optimized, and the infrastructure int he secondary environment can be deleted.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review business continuity drills'
        url: /azure/architecture/framework/DevOps/testing#business-continuity-drills
        noneOf:
        - DevOps.6.A
        - DevOps.6.F
        anyOf:
        - DevOps.6.A
        - DevOps.6.B
        - DevOps.6.C
        - DevOps.6.D
        - DevOps.6.E
    - id: DevOps-6-B
      title: Perform disaster recovery and fault injection.
      description: If the application should be resilient to infrastructure failures, introducing faults in the underlying infrastructure and observing how the application behaves is fundamental for increasing the trust in your redundancy mechanisms. Shutting down ungracefully infrastructure components, degrading the performance of certain elements such as network equipment or introducing faults purposely in the environment are ways of verifying that the application is going to react as expected when these situations occur in real life.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review dr and fault injection'
        url: /azure/architecture/framework/DevOps/testing#dr-and-fault-injection
        noneOf:
        - DevOps.6.B
        - DevOps.6.F
        anyOf:
        - DevOps.6.A
        - DevOps.6.B
        - DevOps.6.C
        - DevOps.6.D
        - DevOps.6.E
    - id: DevOps-6-C
      title: Automate testing on deployments.
      description: Automating tests is the best way to make sure that they are executed. Depending on how frequently tests are performed, they are typically limited in duration and scope, as the different types of automated tests will show unit testing, smoke testing, and integration testing.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review automated testing'
        url: /azure/architecture/framework/DevOps/testing#automated-testing
        noneOf:
        - DevOps.6.C
        - DevOps.6.F
        anyOf:
        - DevOps.6.A
        - DevOps.6.B
        - DevOps.6.C
        - DevOps.6.D
        - DevOps.6.E
    - id: DevOps-6-D
      title: Use manual testing when required.
      description: Manual testing is much more expensive than automated testing, and as a consequence it is run much less frequently. However, manual testing is fundamental for the correct functioning of the DevOps feedback loop, to correct errors before they become too expensive to repair, or cause customer dissatisfaction.
      iconUrl: /assessments/media/devops.svg
      links:
      - text: 'Review application manual testing'
        url: /azure/architecture/framework/DevOps/testing#application-manual-testing
        noneOf:
        - DevOps.6.D
        - DevOps.6.F
        anyOf:
        - DevOps.6.A
        - DevOps.6.B
        - DevOps.6.C
        - DevOps.6.D
        - DevOps.6.E
    - id: Security-0-A
      title: Identified and classified business critical applications.
      description: Ensure you have identified and classified the applications in your portfolio that are critical to business functions. Enterprise organizations typically have a large application portfolio, so prioritizing where to invest time and effort into manual and resource-intensive tasks like threat modeling can increase the effectiveness of your security program. Identify applications that have a high potential impact and/or a high potential exposure to risk.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review identify and classify business critical applications'
        url: /azure/architecture/framework/Security/applications-services#identify-and-classify-business-critical-applications
        noneOf:
        - Security.0.A
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-B
      title: Adopted a DevOps approach to building software.
      description: Organizations should shift from a â€˜Waterfallâ€™ development cycle to DevOps lifecycle of continuous integration, continuous delivery (CI/CD) for applications as fast as is practical. DevOps is the union of people, processes, and tools that enable continuous delivery of value to end users. The contraction of Dev and Ops refers to combining the development and operations disciplines into multi-disciplinary teams that work together with shared and efficient practices and tools. The DevOps model increases the organizationâ€™s ability to rapidly address security concerns without waiting for a longer planning and testing cycle of a waterfall model.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review adopt the devops approach'
        url: /azure/architecture/framework/Security/applications-services#adopt-the-devops-approach
        noneOf:
        - Security.0.B
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-C
      title: Leverage DevOps security guidance.
      description: Organizations should leverage guidance and automation for securing applications on the cloud rather than starting from zero. Using resources and lessons learned by external organizations that are early adopters of these models can accelerate the improvement of an organizationâ€™s security posture with less expenditure of effort and resources.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review follow devops security guidance'
        url: /azure/architecture/framework/Security/applications-services#follow-devops-security-guidance
        noneOf:
        - Security.0.C
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-D
      title: Use cloud services instead of building custom security implementations.
      description: Developers should use services available from your cloud provider for well-established functions like databases, encryption, identity directory, and authentication instead of writing custom versions of them. These services provide better security, reliability, and efficiency because
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use cloud services instead of custom implementations'
        url: /azure/architecture/framework/Security/applications-services#use-cloud-services-instead-of-custom-implementations
        noneOf:
        - Security.0.D
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-E
      title: Use native security capabilities built into cloud services.
      description: Use native security capabilities built into cloud services instead of adding external security components (for data encryption, network traffic filtering, threat detection, and other functions). Native security controls are maintained and supported by the service provider, eliminating or reducing effort required to integrate external security tooling and update those integrations over time. Cloud services evolve rapidly, which greatly increases the burden of maintaining an external tool and increases risk of losing security visibility and protections from these tools if the tool doesnâ€™t keep up with the cloud service.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use native security capabilities in application services'
        url: /azure/architecture/framework/Security/applications-services#use-native-security-capabilities-in-application-services
        noneOf:
        - Security.0.E
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-F
      title: Implement security practices and tools during the development lifecycle.
      description: Reduce the count and potential severity of security bugs in your application by implementing security practices and tools during the development lifecycle. Security bugs can result in an application disclosing confidential data, allowing criminals to alter data/records, or the data/application becoming
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review bottom-up approach to reduce security bug volume and impact'
        url: /azure/architecture/framework/Security/applications-services#bottom-up-approach-to-reduce-security-bug-volume-and-impact
        noneOf:
        - Security.0.F
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-G
      title: Follow best practices for container security.
      description: Applications hosted in containers should follow general application best practices as well as some specific guidelines to manage this new application architecture type Containerized applications face the same risks as any application and also adds new requirements to securely the hosting and management of the containerized applications. Application containers architectures introduced a new layer of abstraction and management tooling (typically Kubernetes) that have increased developer productivity and adoption of DevOps principles.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review follow best practices for container security'
        url: /azure/architecture/framework/Security/applications-services#follow-best-practices-for-container-security
        noneOf:
        - Security.0.G
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-H
      title: Install a web application firewall in front of your workload.
      description: Web application firewalls (WAFs) mitigate the risk of an attacker being able to exploit commonly seen security vulnerabilities for applications. While not perfect, WAFs provide a basic minimum level of security for web applications. WAFs are an important mitigation as attackers target web applications for an ingress point into an organization similar to a client endpoint. WAFs are appropriate for both organizations without a strong application security program and organizations who have invested in application security as WAFs provide a valuable additional defense in-depth mitigation.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use web application firewalls'
        url: /azure/architecture/framework/Security/applications-services#use-web-application-firewalls
        noneOf:
        - Security.0.H
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-0-I
      title: Authenticate via identity services where you can.
      description: Always authenticate with identity services rather than cryptographic keys when available. Managing keys securely with application code is difficult and regularly leads to mistakes like accidentally publishing sensitive access keys to code repositories like GitHub. Identity systems offer secure and usable experience for access control with built-in sophisticated mechanisms for key rotation, monitoring for anomalies, and more. Most organizations also have skilled teams dedicated to managing identity systems and few (if any) people actively managing key security systems.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review prefer identity authentication over keys'
        url: /azure/architecture/framework/Security/applications-services#prefer-identity-authentication-over-keys
        noneOf:
        - Security.0.I
        - Security.0.K
        anyOf:
        - Security.0.A
        - Security.0.B
        - Security.0.C
        - Security.0.D
        - Security.0.E
        - Security.0.F
        - Security.0.G
        - Security.0.H
        - Security.0.I
        - Security.0.J
    - id: Security-1-A
      title: Evaluate your security posture using standard benchmarks.
      description: Use an industry standard benchmark to evaluate your organizations current security posture. Benchmarking allows you to improve your security program by learning from external organizations. Benchmarking lets you know how your current security state compares to that of other organizations, providing both external validation for successful elements of your current system as well as identifying gaps that serve as opportunities to enrich your teamâ€™s overall security strategy. Even if your security program isnâ€™t tied to a specific benchmark or regulatory standard, you will benefit from understanding the documented ideal states by those outside and inside of your industry.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review evaluate security using benchmarks'
        url: /azure/architecture/framework/Security/governance#evaluate-security-using-benchmarks
        noneOf:
        - Security.1.A
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-B
      title: Remove virtual machine direct internet connectivity.
      description: Ensure policy and processes require restricting and monitoring direct internet connectivity by virtual machines. Attackers constantly scan public cloud IP ranges for open management ports and attempt 'easy' attacks like common passwords and known unpatched vulnerabilities.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review remove virtual machine (vm) direct internet connectivity'
        url: /azure/architecture/framework/Security/governance#remove-virtual-machine-(vm)-direct-internet-connectivity
        noneOf:
        - Security.1.B
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-C
      title: Monitor identity risk.
      description: Monitor identity related risk events for warning on potentially compromised identities and remediate those risks. Most security incidents take place after an attacker initially gains access using a stolen identity. These identities can often start with low privileges, but the attackers then use that identity to traverse laterally and gain access to more privileged identities. This repeats as needed until the attacker controls access to the ultimate target data or systems.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review monitor identity risk'
        url: /azure/architecture/framework/Security/governance#monitor-identity-risk
        noneOf:
        - Security.1.C
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-D
      title: Perform penetration testing.
      description: Use Penetration Testing to validate security defenses. Real world validation of security defenses is critical to validate your defense strategy and implementation. This can be accomplished by a penetration test (simulates a one time attack) or a red ream program (simulates a persistent threat actor targeting your environment). Standard tests you can perform include Tests on your endpoints to uncover the Open Web Application Security Project (OWASP) top 10 vulnerabilities, Fuzz testing of your endpoints, Port scanning of your endpoints.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review penetration testing'
        url: /azure/architecture/framework/Security/governance#penetration-testing
        noneOf:
        - Security.1.D
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-E
      title: Prioritize security best practices.
      description: Security best practices are ideally applied proactively and completely to all systems as you build your cloud program, but this isnâ€™t reality for most enterprise organizations. Business goals, project constraints, and other factors often cause organizations to balance security risk against other risks and apply
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review prioritize security best practices'
        url: /azure/architecture/framework/Security/governance#prioritize-security-best-practices
        noneOf:
        - Security.1.E
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-F
      title: Manage connected tenants.
      description: Ensure your security organization is aware of all enrollments and associated subscriptions connected to your existing environment (via ExpressRoute or Site-Site VPN) and monitoring as part of the overall enterprise. These azure resources are part of your enterprise environment and security
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review manage connected tenants'
        url: /azure/architecture/framework/Security/governance#manage-connected-tenants
        noneOf:
        - Security.1.F
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-G
      title: Lines of responsibility are established.
      description: Designate the parties responsible for specific functions in Azure. Clearly documenting and sharing the contacts responsible for each of these functions will create consistency and facilitate communication. Based on our experience with many cloud adoption projects, this will avoid confusion that can
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review clear lines of responsibility'
        url: /azure/architecture/framework/Security/governance#clear-lines-of-responsibility
        noneOf:
        - Security.1.G
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-H
      title: There is an enterprise segmentation strategy in place.
      description: Identify groups of resources that can be isolated from other parts of the enterprise to contain (and detect) adversary movement within your enterprise. This unified enterprise segmentation strategy will guide all technical teams to
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review enterprise segmentation strategy'
        url: /azure/architecture/framework/Security/governance#enterprise-segmentation-strategy
        noneOf:
        - Security.1.H
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-I
      title: The security team has read only access into all environments.
      description: Provide security teams read-only access to the security aspects of all technical resources in their purview Security organizations require visibility into the technical environment to perform their duties of assessing and reporting on organizational risk. Without this visibility, security will have to rely on information provided from groups operating the environment who have a potential conflict of interest (and other priorities). Note that security teams may separately be granted additional privileges if they have operational responsibilities or a requirement to enforce compliance on Azure resources.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review security team visibility'
        url: /azure/architecture/framework/Security/governance#security-team-visibility
        noneOf:
        - Security.1.I
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-J
      title: Use the root management group carefully.
      description: Use the Root Management Group (MG) for enterprise consistency, but test changes carefully to minimize risk of operational disruption. The root management group enables you to ensure consistency across the enterprise by applying policies, permissions, and tags across all subscriptions.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use root management group carefully'
        url: /azure/architecture/framework/Security/governance#use-root-management-group-carefully
        noneOf:
        - Security.1.J
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-K
      title: Have a policy in place to apply security updates to VMs and strong password requirements.
      description: Ensure policy and processes enable (and require) rapid application of security updates to virtual machines. Attackers constantly scan public cloud IP ranges for open management ports and attempt 'easy' attacks like common passwords and unpatched vulnerabilities.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review virtual machine (vm) security updates and strong passwords'
        url: /azure/architecture/framework/Security/governance#virtual-machine-(vm)-security-updates-and-strong-passwords
        noneOf:
        - Security.1.K
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-L
      title: Assigned a security incident notification contact.
      description: Ensure a security contact receives Azure incident notifications from Microsoft typically a notification that your resource is compromised and/or attacking another customer. This enables your security operations team to rapidly respond to potential
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review assign incident notification contact'
        url: /azure/architecture/framework/Security/governance#assign-incident-notification-contact
        noneOf:
        - Security.1.L
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-M
      title: Regularly review access from critical accounts.
      description: Regularly review roles that are assigned privileges with a business-critical impact. Set up a recurring review pattern to ensure that accounts are removed from permissions as roles change. You can conduct the review manually or through an automated process by using tools such as Azure AD access reviews.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review regularly review critical access'
        url: /azure/architecture/framework/Security/governance#regularly-review-critical-access
        noneOf:
        - Security.1.M
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-N
      title: Discover and remediate common risks.
      description: Identity well known risks for your Azure tenants, remediate those risks, and track your progress using Secure Score. Identifying and remediating common security hygiene risks significantly reduces overall risk to your organization by increasing cost to attackers. When you remove cheap and well-established attack vectors, attackers are forced to acquire and use advanced or untested attack methods.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review discover and remediate common risks'
        url: /azure/architecture/framework/Security/governance#discover-and-remediate-common-risks
        noneOf:
        - Security.1.N
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-O
      title: Use blueprints to consistently deploy environments that comply with organizational policies.
      description: Use Azureâ€™s native automation capabilities to increase consistency, compliance, and deployment speed for workloads. Automation of deployment and maintenance tasks reduces security and compliance risk by limiting opportunity to introduce human errors during manual tasks. This
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review increase automation with azure blueprints'
        url: /azure/architecture/framework/Security/governance#increase-automation-with-azure-blueprints
        noneOf:
        - Security.1.O
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-P
      title: Discover and replace insecure protocols.
      description: Discover and disable the use of legacy insecure protocols SMBv1, LM/NTLMv1,
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review discover and replace insecure protocols'
        url: /azure/architecture/framework/Security/governance#discover-and-replace-insecure-protocols
        noneOf:
        - Security.1.P
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-Q
      title: Considered whether or not you need elevated security capabilities.
      description: Consider whether to utilize specialized security capabilities in your enterprise architecture. These measures have the potential to enhance security and meet regulatory requirements, but can introduce complexity that may negatively impact your operations and efficiency.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review elevated security capabilities'
        url: /azure/architecture/framework/Security/governance#elevated-security-capabilities
        noneOf:
        - Security.1.Q
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-R
      title: Assigned appropriate privileges for managing the environment.
      description: Grant roles with operational responsibilities in Azure the appropriate permissions based on a clearly documented strategy built from the principle of least privilege and your operational needs. Providing clear guidance that follows a reference model will reduce risk because
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review assign privileges for managing the environment'
        url: /azure/architecture/framework/Security/governance#assign-privileges-for-managing-the-environment
        noneOf:
        - Security.1.R
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-1-S
      title: Audit and enforce policy compliance.
      description: Ensure that the security team is auditing the environment to report on compliance with the security policy of the organization. Security teams may also enforce compliance with these policies. Organizations of all sizes will have security compliance requirements. Industry,
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review audit and enforce policy compliance'
        url: /azure/architecture/framework/Security/governance#audit-and-enforce-policy-compliance
        noneOf:
        - Security.1.S
        - Security.1.U
        anyOf:
        - Security.1.A
        - Security.1.B
        - Security.1.C
        - Security.1.D
        - Security.1.E
        - Security.1.F
        - Security.1.G
        - Security.1.H
        - Security.1.I
        - Security.1.J
        - Security.1.K
        - Security.1.L
        - Security.1.M
        - Security.1.N
        - Security.1.O
        - Security.1.P
        - Security.1.Q
        - Security.1.R
        - Security.1.S
        - Security.1.T
    - id: Security-2-A
      title: Use identity based storage access controls.
      description: Cloud service providers make multiple methods of access control over storage resources available. Examples include shared keys, shared signatures, anonymous access, and identity provider-based methods. Identify provider methods of authentication and authorization are the least liable to compromise and enable more fine-grained role-based access controls over storage resources.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use identity based storage access controls'
        url: /azure/architecture/framework/Security/storage-data-encryption#use-identity-based-storage-access-controls
        noneOf:
        - Security.2.A
        - Security.2.G
        anyOf:
        - Security.2.A
        - Security.2.B
        - Security.2.C
        - Security.2.D
        - Security.2.E
        - Security.2.F
    - id: Security-2-B
      title: Enabled platform encryption services.
      description: All public cloud service providers enable encryption that is done automatically using provider-managed keys on their platform. In many cases, this is done for the customer and no user interaction is required. In other cases, the provider makes this an option that the customer can choose to use or not to use. There is almost no overhead in enabling this type of encryption as itâ€™s managed by the cloud service provider. We recommend that for each service that supports service provider encryption that you enable that option.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review enable platform encryption services'
        url: /azure/architecture/framework/Security/storage-data-encryption#enable-platform-encryption-services
        noneOf:
        - Security.2.B
        - Security.2.G
        anyOf:
        - Security.2.A
        - Security.2.B
        - Security.2.C
        - Security.2.D
        - Security.2.E
        - Security.2.F
    - id: Security-2-C
      title: Data at rest is encrypted.
      description: Protecting data at rest is required to maintain confidentiality, integrity, and availability assurances across all workloads. Storage in a cloud service like Azure is architected and implemented quite differently than on premises solutions to enable massive scaling, modern access through REST APIs, and isolation between tenants. Encryption at rest provides data protection for stored data (at rest). Attacks against data at-rest include attempts to obtain physical access to the hardware on which the data is stored, and then compromise the contained data. In such an attack, a serverâ€™s hard drive may have been mishandled during maintenance allowing an attacker to remove the hard drive. Later the attacker would put the hard drive into a computer under their control to attempt to access the data.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review data at rest'
        url: /azure/architecture/framework/Security/storage-data-encryption#data-at-rest
        noneOf:
        - Security.2.C
        - Security.2.G
        anyOf:
        - Security.2.A
        - Security.2.B
        - Security.2.C
        - Security.2.D
        - Security.2.E
        - Security.2.F
    - id: Security-2-D
      title: Data in transit is encrypted.
      description: If data moving over a network is not encrypted, thereâ€™s a chance that it can be captured and stolen by unauthorized users. When you're dealing with database services, make sure that data is encrypted between the database client and server. Also make sure that data is encrypted between database servers that communicate with each other and with middle-tier applications.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review data in transit'
        url: /azure/architecture/framework/Security/storage-data-encryption#data-in-transit
        noneOf:
        - Security.2.D
        - Security.2.G
        anyOf:
        - Security.2.A
        - Security.2.B
        - Security.2.C
        - Security.2.D
        - Security.2.E
        - Security.2.F
    - id: Security-2-E
      title: Encrypt your virtual disk files.
      description: Virtual machines use virtual disk files as virtual storage volumes and exist in a cloud service providerâ€™s blob storage system. These files can be moved from on-premises to cloud systems, from cloud systems to on-premises, or between cloud systems. Due to the mobility of these files, you need to make sure the files and their contents are not accessible to unauthorized users. Authentication-based access controls should be in place to prevent potential attackers from downloading the files to their own systems. In the event of a flaw in the authentication and authorization system or its configuration, you
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review encrypt virtual disk files'
        url: /azure/architecture/framework/Security/storage-data-encryption#encrypt-virtual-disk-files
        noneOf:
        - Security.2.E
        - Security.2.G
        anyOf:
        - Security.2.A
        - Security.2.B
        - Security.2.C
        - Security.2.D
        - Security.2.E
        - Security.2.F
    - id: Security-3-A
      title: Use a single enterprise directory.
      description: Establish a single enterprise directory for managing identities of full-time employees and enterprise resources. A single authoritative source for identities increases clarity and consistency for all roles in IT and Security. This reduces security risk from human errors and automation failures resulting from complexity. By having a single authoritative source, teams that need to make changes to the directory can do so in one place and have confidence that their change will take effect everywhere.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review single enterprise directory'
        url: /azure/architecture/framework/Security/identity#single-enterprise-directory
        noneOf:
        - Security.3.A
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-B
      title: Synchronize your identity systems.
      description: Synchronize your cloud identity with your existing identity systems. Consistency of identities across cloud and on-premises will reduce human errors and resulting security risk. Teams managing resources in both environment need a consistent authoritative source to achieve security assurances. For Azure, synchronize Azure AD with your existing authoritative on premises Active Directory using Azure AD connect. This is also required for an Office 365 migration, so it is often already done before Azure migration and development projects begin. Note that administrator accounts should be excepted from synchronization.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review synchronize identity systems'
        url: /azure/architecture/framework/Security/identity#synchronize-identity-systems
        noneOf:
        - Security.3.B
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-C
      title: Use cloud provider identity sources for third parties.
      description: Use cloud identity services designed to host non-employee accounts rather than including vendors, partners, and customers in a corporate directory. This reduces risk by granting the appropriate level of access to external entities instead of the full default permissions given to full-time employees. This least privilege approach and clear clearly differentiation of external accounts from company staff makes it easier to prevent and detect attacks coming in from these vectors. Additionally, management of these identities is done by the external also increases productivity by parties, reducing effort required
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use cloud provider identity source for third parties'
        url: /azure/architecture/framework/Security/identity#use-cloud-provider-identity-source-for-third-parties
        noneOf:
        - Security.3.C
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-D
      title: Block legacy authentication protocols.
      description: Disable insecure legacy protocols for internet-facing services. Legacy authentication methods are among the top attack vectors for cloud-hosted services. Created before multifactor-authentication existed, legacy protocols donâ€™t support additional factors beyond passwords and are therefore prime
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review block legacy authentication'
        url: /azure/architecture/framework/Security/identity#block-legacy-authentication
        noneOf:
        - Security.3.D
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-E
      title: Perform attack simulation on users.
      description: Regularly simulate attacks against users to educate and empower them. People are a critical part of your defense, so ensure they have the knowledge and skills to avoid and resist attacks will reduce your overall organizational risk.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review attack simulation for users'
        url: /azure/architecture/framework/Security/identity#attack-simulation-for-users
        noneOf:
        - Security.3.E
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-F
      title: Enforce conditional access for users.
      description: Authentication for all users should include measurement and enforcement of key security attributes to support a Zero Trust strategy. Attackers compromising Azure Admin accounts can cause significant harm. Conditional Access can significantly reduce that risk by enforcing security hygiene before allowing access to Azure management.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review enforce conditional access for users - zero trust'
        url: /azure/architecture/framework/Security/identity#enforce-conditional-access-for-users---zero-trust
        noneOf:
        - Security.3.F
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-G
      title: Do not synchronize your on-premises admin accounts to cloud identity providers.
      description: Donâ€™t synchronize accounts with the highest privilege access to on premises resources as you synchronize your enterprise identity systems with cloud directories. This mitigates the risk of an adversary pivoting to full control of on-premises assets following a successful compromise of a cloud account. This helps contain the scope of an incident from growing significantly.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review donâ€™t synchronize on-premises admin accounts to cloud identity providers'
        url: /azure/architecture/framework/Security/identity#donâ€™t-synchronize-on-premises-admin-accounts-to-cloud-identity-providers
        noneOf:
        - Security.3.G
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-H
      title: Use cross-platform identity management.
      description: Use a single identity provider for authenticating all platforms (Windows, Linux, and others) and cloud services. A single identity provider for all enterprise assets will simplify management and security, minimizing the risk of oversights or human mistakes. Deploying multiple identity solutions (or an incomplete solution) can result in unenforceable password policies, passwords not reset after a breach, proliferation of passwords (often stored insecurely), and former employees retaining passwords after termination.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use cross-platform credential management'
        url: /azure/architecture/framework/Security/identity#use-cross-platform-credential-management
        noneOf:
        - Security.3.H
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-I
      title: Have an identity strategy.
      description: Many consider identity to be the primary perimeter for security. This is a shift from the traditional focus on network security. Network perimeters keep getting more porous, and that perimeter defense canâ€™t be as effective as it was before the explosion of BYOD devices and cloud applications. Azure Active Directory (Azure AD) is the Azure solution for identity and access management. Azure AD is a multitenant, cloud-based directory and identity management service from Microsoft. It combines core directory services, application access management, and identity protection into a single solution.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review identity strategy'
        url: /azure/architecture/framework/Security/identity#identity-strategy
        noneOf:
        - Security.3.I
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-J
      title: Use modern password protection offerings.
      description: Provide modern and effective protections for accounts that cannot go passwordless. Legacy identity providers mostly checked to make sure passwords had a good mix of character types and minimum length, but we have learned that these controls in practice led to passwords with less entropy that could be cracked easier.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review use modern password protection offerings'
        url: /azure/architecture/framework/Security/identity#use-modern-password-protection-offerings
        noneOf:
        - Security.3.J
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-3-K
      title: Have passwordless or multi-factor authentication enabled.
      description: All users should be converted to use passwordless authentication or multi-factor authentication (MFA) over time. You can also reduce use of passwords by applications using Managed Identities to grant access to resources in Azure.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review passwordless or multi-factor authentication'
        url: /azure/architecture/framework/Security/identity#passwordless-or-multi-factor-authentication
        noneOf:
        - Security.3.K
        - Security.3.M
        anyOf:
        - Security.3.A
        - Security.3.B
        - Security.3.C
        - Security.3.D
        - Security.3.E
        - Security.3.F
        - Security.3.G
        - Security.3.H
        - Security.3.I
        - Security.3.J
        - Security.3.K
        - Security.3.L
    - id: Security-4-A
      title: Have centralized network management and security.
      description: Centralize the organizational responsibility for management and security of core networking functions such as cross-premises links, virtual networking, subnetting, and IP address schemes as well as network security elements such as virtual network appliances, encryption of cloud virtual network activity and cross-premises traffic, network-based access controls, and other traditional network security components. When you centralize network management and security you reduce the potential for inconsistent strategies that can create potential attacker exploitable security risks. Because all divisions of the IT and development organizations do not have the same level of network management and security knowledge and sophistication, organizations benefit from leveraging a centralized network teamâ€™s expertise and tooling.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review centralize network management and security'
        url: /azure/architecture/framework/Security/network-security-containment#centralize-network-management-and-security
        noneOf:
        - Security.4.A
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-B
      title: Aligned network segmentation with the enterprise segmentation strategy.
      description: Align your network segmentation model with the enterprise segmentation model for your organization (defined in Governance, Risk, and Compliance section). This will reduce confusion and resulting challenges with different technical teams (networking, identity, applications, etc.) each developing their own segmentation and delegation models that donâ€™t align with each other. This leads to a straightforward and unified security strategy, which helps reduce the number of errors due to human error and inability to increase reliability through automation.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review align network segmentation with enterprise segmentation strategy'
        url: /azure/architecture/framework/Security/network-security-containment#align-network-segmentation-with-enterprise-segmentation-strategy
        noneOf:
        - Security.4.B
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-C
      title: Security extends past your network boundaries.
      description: Ensure technical controls can effectively prevent, detect, and respond to threats outside the networks you control. As organizations shift to modern architectures, many services and components required for applications will be accessed over the internet or on cloud provider networks, often by mobile and other devices off the network. Traditional network controls based on a *'trusted intranet'* approach will not be able to effectively provide security assurances for these applications. This shifting landscape is captured well by principles documented by the Jericho Forum and â€˜Zero Trustâ€™ approaches.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review evolve security beyond network controls'
        url: /azure/architecture/framework/Security/network-security-containment#evolve-security-beyond-network-controls
        noneOf:
        - Security.4.C
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-D
      title: Deprecated the use of legacy security technologies.
      description: Discontinue the use of signature-based Network Intrusion Detection/Network Intrusion Prevention (NIDS/NIPS) Systems and Network Data Leakage/Loss Prevention (DLP). The major cloud service providers already filter for malformed packets and common network layer attacks, so thereâ€™s no need for a NIDS/NIPS solution to detect those. In addition, traditional NIDS/NIPS solutions are typically driven by signature-based approaches (which are considered outdated) and are easily evaded by attackers and typically produce a high rate of false positives. NIDS and NIPS style of capabilities that.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review discontinue legacy network security technology'
        url: /azure/architecture/framework/Security/network-security-containment#discontinue-legacy-network-security-technology
        noneOf:
        - Security.4.D
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-E
      title: Enabled enhanced network visibility.
      description: You should enable enhanced network visibility by integrating network logs into a Security information and event management (SIEM) like Azure Sentinel or a third partner solution such as Splunk, QRadar, or ArcSight ESM. Integrating logs from your network devices, and even raw network traffic itself,
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review enable enhanced network visibility'
        url: /azure/architecture/framework/Security/network-security-containment#enable-enhanced-network-visibility
        noneOf:
        - Security.4.E
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-F
      title: DDoS mitigation plan is in place.
      description: Enable Distributed Denial of Service (DDoS) mitigations for all business-critical web application and services. DDoS attacks are prevalent and are easily carried out by unsophisticated attackers. There are even 'DDoS as a service' options on the dark net. DDoS attacks can be very debilitating and completely block access to your services and even take down the services, depending on the type of DDoS attack.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review mitigate ddos attacks'
        url: /azure/architecture/framework/Security/network-security-containment#mitigate-ddos-attacks
        noneOf:
        - Security.4.F
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-G
      title: Have an intentional subnet security strategy.
      description: Design virtual networks and subnets for growth. Most organizations end up adding more resources to their networks than they initially planned for. When this happens, IP addressing and subnetting schemes need to be refactored to accommodate the extra resources. This is a labor-intensive process. There is limited security value in creating a very large number of small subnets and then trying to map network access controls (such as security groups) to each of them. We recommend that you plan your subnets based on common roles and functions that use common protocols for those roles and functions. This allows you to add resources to the subnet without needing to make changes to security groups that enforce network level access controls.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review design virtual network subnet security'
        url: /azure/architecture/framework/Security/network-security-containment#design-virtual-network-subnet-security
        noneOf:
        - Security.4.G
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-H
      title: Have a security containment strategy.
      description: Create a risk containment strategy that blends proven approaches including existing network security controls and practices, native security controls available in Azure, and zero trust approaches. Containment of attack vectors within an environment is critical. However, in order to be effective in cloud environments, traditional approaches may prove inadequate and security organizations need to evolve their methods.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review build a security containment strategy'
        url: /azure/architecture/framework/Security/network-security-containment#build-a-security-containment-strategy
        noneOf:
        - Security.4.H
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-I
      title: Have an internet ingress/egress policy defined.
      description: Choose to route traffic destined for the Internet through on-premises security devices or allow Internet connectivity through cloud-based network security devices. Routing Internet traffic through on-premises network security devices is also known as 'forced tunneling'. In a forced tunneling scenario, all connectivity to the Internet is forced back to on-premises network security devices through a cross-premises WAN link. The goal is to provide network security teams greater security and visibility for Internet traffic. Even when your resources in the cloud try to respond to incoming requests from the Internet, the responses will be forced through on-premises network security devices.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review decide upon an internet ingress/egress policy'
        url: /azure/architecture/framework/Security/network-security-containment#decide-upon-an-internet-ingress/egress-policy
        noneOf:
        - Security.4.I
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-4-J
      title: Have implemented an internet edge strategy.
      description: Choose whether to use native cloud service provider controls or virtual network appliances for internet edge security. Internet edge traffic (sometimes referred to as 'North-South' traffic) represents network connectivity between your assets in the cloud and the Internet. Legacy workloads require protection from Internet endpoints because they were built with the assumption that an internet firewall protected them against these attacks. An Internet edge strategy is intended to mitigate as many attacks from the internet as is reasonable to detect or block.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review define an internet edge strategy'
        url: /azure/architecture/framework/Security/network-security-containment#define-an-internet-edge-strategy
        noneOf:
        - Security.4.J
        - Security.4.L
        anyOf:
        - Security.4.A
        - Security.4.B
        - Security.4.C
        - Security.4.D
        - Security.4.E
        - Security.4.F
        - Security.4.G
        - Security.4.H
        - Security.4.I
        - Security.4.J
        - Security.4.K
    - id: Security-5-A
      title: Build the appropriate level of resilience into your security infrastructure.
      description: Building cybersecurity resilience into your organization requires balancing investments across the security lifecycle, diligently applying maintenance, vigilantly responding to anomalies and alerts to prevent security assurance decay, and designing to defense in depth and least privilege. Balancing your investments will help you both prevent cybersecurity attacks and rapidly restore normal operations in the event of a successful attack. By investing in both of these, you will reduce the risk your organization faces. The functions of the NIST map well to these dual goals Identify/Protect and Detect/Respond/Recovery.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review resilience'
        url: /azure/architecture/framework/Security/tradeoffs#resilience
        noneOf:
        - Security.5.A
        - Security.5.E
        anyOf:
        - Security.5.A
        - Security.5.B
        - Security.5.C
        - Security.5.D
    - id: Security-5-B
      title: Balanced attacker cost versus your own.
      description: Cybersecurity attacks are planned and conducted by human attackers that must manage their return on investment into attacks (return could include profit or achieving an assigned objective). As you invest in security, you should carefully consider how you can damage the *attackerâ€™s return on investment*
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review increasing attacker cost'
        url: /azure/architecture/framework/Security/tradeoffs#increasing-attacker-cost
        noneOf:
        - Security.5.B
        - Security.5.E
        anyOf:
        - Security.5.A
        - Security.5.B
        - Security.5.C
        - Security.5.D
    - id: Security-5-C
      title: Contained attacker access.
      description: The actual security risk for an organization is heavily influenced by how much access an adversary can or does obtain to valuable systems and data. Your investments should be focused on ensuring your security measures constrain how much access an adversary gets time and privilege.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review containing attacker access'
        url: /azure/architecture/framework/Security/tradeoffs#containing-attacker-access
        noneOf:
        - Security.5.C
        - Security.5.E
        anyOf:
        - Security.5.A
        - Security.5.B
        - Security.5.C
        - Security.5.D
    - id: Security-6-A
      title: Simulate attacks against critical impact accounts.
      description: Regularly simulate attacks against administrative users with current attack techniques to educate and empower them. People are a critical part of your defense, especially your personnel with access to critical impact accounts. Ensuring these users (and ideally all users) have the knowledge and skills to avoid and resist attacks will reduce your overall organizational risk.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review attack simulation for critical impact accounts'
        url: /azure/architecture/framework/Security/critical-impact-accounts#attack-simulation-for-critical-impact-accounts
        noneOf:
        - Security.6.A
        - Security.6.F
        anyOf:
        - Security.6.A
        - Security.6.B
        - Security.6.C
        - Security.6.D
        - Security.6.E
    - id: Security-6-B
      title: Don't assign users with granular or custom permissions.
      description: Avoid permissions that specifically reference individual resources or users. Specific permissions create unneeded complexity and confusion as they donâ€™t carry the intention to new similar resources. This then accumulates into a complex legacy configuration that is difficult to maintain or change without
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review avoid granular and custom permissions'
        url: /azure/architecture/framework/Security/critical-impact-accounts#avoid-granular-and-custom-permissions
        noneOf:
        - Security.6.B
        - Security.6.F
        anyOf:
        - Security.6.A
        - Security.6.B
        - Security.6.C
        - Security.6.D
        - Security.6.E
    - id: Security-6-C
      title: Established a lifecycle management policy for critical impact accounts.
      description: Ensure you have a process for disabling or deleting administrative accounts when admin personnel leave the organization (or leave administrative positions)
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review establish lifecycle management for critical impact accounts'
        url: /azure/architecture/framework/Security/critical-impact-accounts#establish-lifecycle-management-for-critical-impact-accounts
        noneOf:
        - Security.6.C
        - Security.6.F
        anyOf:
        - Security.6.A
        - Security.6.B
        - Security.6.C
        - Security.6.D
        - Security.6.E
    - id: Security-6-D
      title: Appropriate emergency access accounts configured.
      description: Ensure you have a mechanism for obtaining administrative access in case of an emergency. While rare, sometimes extreme circumstances arise where all normal means of administrative access are unavailable.
      iconUrl: /assessments/media/security.svg
      links:
      - text: 'Review emergency access or â€˜break glassâ€™ accounts'
        url: /azure/architecture/framework/Security/critical-impact-accounts#emergency-access-or-â€˜break-glassâ€™-accounts
        noneOf:
        - Security.6.D
        - Security.6.F
        anyOf:
        - Security.6.A
        - Security.6.B
        - Security.6.C
        - Security.6.D
        - Security.6.E
